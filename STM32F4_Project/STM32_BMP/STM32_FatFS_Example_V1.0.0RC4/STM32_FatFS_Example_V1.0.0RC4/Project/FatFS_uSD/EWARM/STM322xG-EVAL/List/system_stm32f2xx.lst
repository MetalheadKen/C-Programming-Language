###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/Aug/2015  14:26:04
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\Devices\STM32F2xx\system_stm32f2xx.c
#    Command line =  
#        "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\Devices\STM32F2xx\system_stm32f2xx.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL -lcN
#        "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\List\"
#        -o "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\Obj\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.20.2\arm\INC\c\DLib_Config_Full.h" -I "D:\Sample Code\Manta\2015 ARM
#        Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\Devices\STM32F2xx\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Core\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\STM32_EVAL\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\STM32_EVAL\Common\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\STM32_EVAL\STM322xG_EVAL\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\Third_Party\fat_fs\inc\"
#        -Oh --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.20.2\arm\CMSIS\Include\"
#    List file    =  
#        D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\List\system_stm32f2xx.lst
#    Object file  =  
#        D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\Obj\system_stm32f2xx.o
#
###############################################################################

D:\Sample Code\Manta\2015 ARM Design Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\Devices\STM32F2xx\system_stm32f2xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f2xx.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0RC4
      6            * @date    21-December-2012
      7            * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F2xx devices,
      9            *          and is generated by the clock configuration tool
     10            *          "STM32f2xx_Clock_Configuration_V1.0.0.xls"
     11            *             
     12            * 1.  This file provides two functions and one global variable to be called from 
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool. 
     17            *                      This function is called at startup just after reset and 
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32f2xx.s" file.
     20            *
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick 
     23            *                                  timer or configure other parameters.
     24            *                                     
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.
     28            *
     29            * 2. After each device reset the HSI (16 MHz) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32f2xx.s" file, to
     31            *    configure the system clock before to branch to main program.
     32            *
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and HSI still used as system clock source. User can 
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            *
     37            * 4. The default value of HSE crystal is set to 25MHz, refer to "HSE_VALUE" define
     38            *    in "stm32f2xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            *
     42            * 5. This file configures the system clock as follows:
     43            *=============================================================================
     44            *=============================================================================
     45            *        Supported STM32F2xx device revision    | Rev B and Y
     46            *-----------------------------------------------------------------------------
     47            *        System Clock source                    | PLL (HSE)
     48            *-----------------------------------------------------------------------------
     49            *        SYSCLK(Hz)                             | 120000000
     50            *-----------------------------------------------------------------------------
     51            *        HCLK(Hz)                               | 120000000
     52            *-----------------------------------------------------------------------------
     53            *        AHB Prescaler                          | 1
     54            *-----------------------------------------------------------------------------
     55            *        APB1 Prescaler                         | 4
     56            *-----------------------------------------------------------------------------
     57            *        APB2 Prescaler                         | 2
     58            *-----------------------------------------------------------------------------
     59            *        HSE Frequency(Hz)                      | 25000000
     60            *-----------------------------------------------------------------------------
     61            *        PLL_M                                  | 25
     62            *-----------------------------------------------------------------------------
     63            *        PLL_N                                  | 240
     64            *-----------------------------------------------------------------------------
     65            *        PLL_P                                  | 2
     66            *-----------------------------------------------------------------------------
     67            *        PLL_Q                                  | 5
     68            *-----------------------------------------------------------------------------
     69            *        PLLI2S_N                               | NA
     70            *-----------------------------------------------------------------------------
     71            *        PLLI2S_R                               | NA
     72            *-----------------------------------------------------------------------------
     73            *        I2S input clock                        | NA
     74            *-----------------------------------------------------------------------------
     75            *        VDD(V)                                 | 3.3
     76            *-----------------------------------------------------------------------------
     77            *        Flash Latency(WS)                      | 3
     78            *-----------------------------------------------------------------------------
     79            *        Prefetch Buffer                        | ON
     80            *-----------------------------------------------------------------------------
     81            *        Instruction cache                      | ON
     82            *-----------------------------------------------------------------------------
     83            *        Data cache                             | ON
     84            *-----------------------------------------------------------------------------
     85            *        Require 48MHz for USB OTG FS,          | Enabled
     86            *        SDIO and RNG clock                     |
     87            *-----------------------------------------------------------------------------
     88            *=============================================================================
     89            ******************************************************************************
     90            * @attention
     91            *
     92            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     93            *
     94            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     95            * You may not use this file except in compliance with the License.
     96            * You may obtain a copy of the License at:
     97            *
     98            *        http://www.st.com/software_license_agreement_liberty_v2
     99            *
    100            * Unless required by applicable law or agreed to in writing, software 
    101            * distributed under the License is distributed on an "AS IS" BASIS, 
    102            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    103            * See the License for the specific language governing permissions and
    104            * limitations under the License.
    105            *
    106            ******************************************************************************
    107            */
    108          
    109          /** @addtogroup CMSIS
    110            * @{
    111            */
    112          
    113          /** @addtogroup stm32f2xx_system
    114            * @{
    115            */  
    116            
    117          /** @addtogroup STM32F2xx_System_Private_Includes
    118            * @{
    119            */
    120          
    121          #include "stm32f2xx.h"
    122          
    123          /**
    124            * @}
    125            */
    126          
    127          /** @addtogroup STM32F2xx_System_Private_TypesDefinitions
    128            * @{
    129            */
    130          
    131          /**
    132            * @}
    133            */
    134          
    135          /** @addtogroup STM32F2xx_System_Private_Defines
    136            * @{
    137            */
    138          
    139          /*!< Uncomment the following line if you need to use external SRAM mounted
    140               on STM322xG_EVAL board as data memory  */
    141          /* #define DATA_IN_ExtSRAM */
    142          
    143          /*!< Uncomment the following line if you need to relocate your vector Table in
    144               Internal SRAM. */
    145          /* #define VECT_TAB_SRAM */
    146          #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
    147                                             This value must be a multiple of 0x200. */
    148          
    149          
    150          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
    151          #define PLL_M      25
    152          #define PLL_N      240
    153          
    154          /* SYSCLK = PLL_VCO / PLL_P */
    155          #define PLL_P      2
    156          
    157          /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
    158          #define PLL_Q      5
    159          
    160          /**
    161            * @}
    162            */
    163          
    164          /** @addtogroup STM32F2xx_System_Private_Macros
    165            * @{
    166            */
    167          
    168          /**
    169            * @}
    170            */
    171          
    172          /** @addtogroup STM32F2xx_System_Private_Variables
    173            * @{
    174            */
    175          
    176            uint32_t SystemCoreClock = 120000000;
    177          
    178            __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    179          
    180          /**
    181            * @}
    182            */
    183          
    184          /** @addtogroup STM32F2xx_System_Private_FunctionPrototypes
    185            * @{
    186            */
    187          
    188          static void SetSysClock(void);
    189          #ifdef DATA_IN_ExtSRAM
    190            static void SystemInit_ExtMemCtl(void); 
    191          #endif /* DATA_IN_ExtSRAM */
    192          
    193          /**
    194            * @}
    195            */
    196          
    197          /** @addtogroup STM32F2xx_System_Private_Functions
    198            * @{
    199            */
    200          
    201          /**
    202            * @brief  Setup the microcontroller system
    203            *         Initialize the Embedded Flash Interface, the PLL and update the 
    204            *         SystemFrequency variable.
    205            * @param  None
    206            * @retval None
    207            */
    208          void SystemInit(void)
    209          {
    210            /* Reset the RCC clock configuration to the default reset state ------------*/
    211            /* Set HSION bit */
    212            RCC->CR |= (uint32_t)0x00000001;
    213          
    214            /* Reset CFGR register */
    215            RCC->CFGR = 0x00000000;
    216          
    217            /* Reset HSEON, CSSON and PLLON bits */
    218            RCC->CR &= (uint32_t)0xFEF6FFFF;
    219          
    220            /* Reset PLLCFGR register */
    221            RCC->PLLCFGR = 0x24003010;
    222          
    223            /* Reset HSEBYP bit */
    224            RCC->CR &= (uint32_t)0xFFFBFFFF;
    225          
    226            /* Disable all interrupts */
    227            RCC->CIR = 0x00000000;
    228          
    229          #ifdef DATA_IN_ExtSRAM
    230            SystemInit_ExtMemCtl(); 
    231          #endif /* DATA_IN_ExtSRAM */
    232                   
    233            /* Configure the System clock source, PLL Multiplier and Divider factors, 
    234               AHB/APBx prescalers and Flash settings ----------------------------------*/
    235            SetSysClock();
    236          
    237            /* Configure the Vector Table location add offset address ------------------*/
    238          #ifdef VECT_TAB_SRAM
    239            SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    240          #else
    241            SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
    242          #endif
    243          }
    244          
    245          /**
    246            * @brief  Update SystemCoreClock variable according to Clock Register Values.
    247            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    248            *         be used by the user application to setup the SysTick timer or configure
    249            *         other parameters.
    250            *           
    251            * @note   Each time the core clock (HCLK) changes, this function must be called
    252            *         to update SystemCoreClock variable value. Otherwise, any configuration
    253            *         based on this variable will be incorrect.         
    254            *     
    255            * @note   - The system frequency computed by this function is not the real 
    256            *           frequency in the chip. It is calculated based on the predefined 
    257            *           constant and the selected clock source:
    258            *             
    259            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    260            *                                              
    261            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    262            *                          
    263            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
    264            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    265            *         
    266            *         (*) HSI_VALUE is a constant defined in stm32f2xx.h file (default value
    267            *             16 MHz) but the real value may vary depending on the variations
    268            *             in voltage and temperature.   
    269            *    
    270            *         (**) HSE_VALUE is a constant defined in stm32f2xx.h file (default value
    271            *              25 MHz), user has to ensure that HSE_VALUE is same as the real
    272            *              frequency of the crystal used. Otherwise, this function may
    273            *              have wrong result.
    274            *                
    275            *         - The result of this function could be not correct when using fractional
    276            *           value for HSE crystal.
    277            *     
    278            * @param  None
    279            * @retval None
    280            */
    281          void SystemCoreClockUpdate(void)
    282          {
    283            uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
    284            
    285            /* Get SYSCLK source -------------------------------------------------------*/
    286            tmp = RCC->CFGR & RCC_CFGR_SWS;
    287          
    288            switch (tmp)
    289            {
    290              case 0x00:  /* HSI used as system clock source */
    291                SystemCoreClock = HSI_VALUE;
    292                break;
    293              case 0x04:  /* HSE used as system clock source */
    294                SystemCoreClock = HSE_VALUE;
    295                break;
    296              case 0x08:  /* PLL used as system clock source */
    297          
    298                /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
    299                   SYSCLK = PLL_VCO / PLL_P
    300                   */    
    301                pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
    302                pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    303                
    304                if (pllsource != 0)
    305                {
    306                  /* HSE used as PLL clock source */
    307                  pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    308                }
    309                else
    310                {
    311                  /* HSI used as PLL clock source */
    312                  pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
    313                }
    314          
    315                pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
    316                SystemCoreClock = pllvco/pllp;
    317                break;
    318              default:
    319                SystemCoreClock = HSI_VALUE;
    320                break;
    321            }
    322            /* Compute HCLK frequency --------------------------------------------------*/
    323            /* Get HCLK prescaler */
    324            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    325            /* HCLK frequency */
    326            SystemCoreClock >>= tmp;
    327          }
    328          
    329          /**
    330            * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
    331            *         AHB/APBx prescalers and Flash settings
    332            * @Note   This function should be called only once the RCC clock configuration  
    333            *         is reset to the default reset state (done in SystemInit() function).   
    334            * @param  None
    335            * @retval None
    336            */
    337          static void SetSysClock(void)
    338          {
    339          /******************************************************************************/
    340          /*            PLL (clocked by HSE) used as System clock source                */
    341          /******************************************************************************/
    342            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    343            
    344            /* Enable HSE */
    345            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    346           
    347            /* Wait till HSE is ready and if Time out is reached exit */
    348            do
    349            {
    350              HSEStatus = RCC->CR & RCC_CR_HSERDY;
    351              StartUpCounter++;
    352            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    353          
    354            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    355            {
    356              HSEStatus = (uint32_t)0x01;
    357            }
    358            else
    359            {
    360              HSEStatus = (uint32_t)0x00;
    361            }
    362          
    363            if (HSEStatus == (uint32_t)0x01)
    364            {
    365              /* HCLK = SYSCLK / 1*/
    366              RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
    367                
    368              /* PCLK2 = HCLK / 2*/
    369              RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    370              
    371              /* PCLK1 = HCLK / 4*/
    372              RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
    373          
    374              /* Configure the main PLL */
    375              RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
    376                             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
    377          
    378              /* Enable the main PLL */
    379              RCC->CR |= RCC_CR_PLLON;
    380          
    381              /* Wait till the main PLL is ready */
    382              while((RCC->CR & RCC_CR_PLLRDY) == 0)
    383              {
    384              }
    385             
    386              /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    387              FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;
    388          
    389              /* Select the main PLL as system clock source */
    390              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    391              RCC->CFGR |= RCC_CFGR_SW_PLL;
    392          
    393              /* Wait till the main PLL is used as system clock source */
    394              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
    395              {
    396              }
    397            }
    398            else
    399            { /* If HSE fails to start-up, the application will have wrong clock
    400                   configuration. User can add here some code to deal with this error */
    401            }
    402          
    403          }
    404          
    405          /**
    406            * @brief  Setup the external memory controller. Called in startup_stm32f2xx.s
    407            *         before jump to __main
    408            * @param  None
    409            * @retval None
    410            */
    411          #ifdef DATA_IN_ExtSRAM
    412          /**
    413            * @brief  Setup the external memory controller.
    414            *         Called in startup_stm32f2xx.s before jump to main.
    415            *         This function configures the external SRAM mounted on STM322xG_EVAL board
    416            *         This SRAM will be used as program data memory (including heap and stack).
    417            * @param  None
    418            * @retval None
    419            */
    420          void SystemInit_ExtMemCtl(void)
    421          {
    422          /*-- GPIOs Configuration -----------------------------------------------------*/
    423          /*
    424           +-------------------+--------------------+------------------+------------------+
    425           +                       SRAM pins assignment                                  +
    426           +-------------------+--------------------+------------------+------------------+
    427           | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 |
    428           | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 |
    429           | PD4  <-> FSMC_NOE | PE7  <-> FSMC_D4   | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 |
    430           | PD5  <-> FSMC_NWE | PE8  <-> FSMC_D5   | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 |
    431           | PD8  <-> FSMC_D13 | PE9  <-> FSMC_D6   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 |
    432           | PD9  <-> FSMC_D14 | PE10 <-> FSMC_D7   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 |
    433           | PD10 <-> FSMC_D15 | PE11 <-> FSMC_D8   | PF12 <-> FSMC_A6 | PG9 <-> FSMC_NE2 |
    434           | PD11 <-> FSMC_A16 | PE12 <-> FSMC_D9   | PF13 <-> FSMC_A7 |------------------+
    435           | PD12 <-> FSMC_A17 | PE13 <-> FSMC_D10  | PF14 <-> FSMC_A8 | 
    436           | PD14 <-> FSMC_D0  | PE14 <-> FSMC_D11  | PF15 <-> FSMC_A9 | 
    437           | PD15 <-> FSMC_D1  | PE15 <-> FSMC_D12  |------------------+
    438           +-------------------+--------------------+
    439          */
    440             /* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    441            RCC->AHB1ENR   = 0x00000078;
    442            
    443            /* Connect PDx pins to FSMC Alternate function */
    444            GPIOD->AFR[0]  = 0x00cc00cc;
    445            GPIOD->AFR[1]  = 0xcc0ccccc;
    446            /* Configure PDx pins in Alternate function mode */  
    447            GPIOD->MODER   = 0xa2aa0a0a;
    448            /* Configure PDx pins speed to 100 MHz */  
    449            GPIOD->OSPEEDR = 0xf3ff0f0f;
    450            /* Configure PDx pins Output type to push-pull */  
    451            GPIOD->OTYPER  = 0x00000000;
    452            /* No pull-up, pull-down for PDx pins */ 
    453            GPIOD->PUPDR   = 0x00000000;
    454          
    455            /* Connect PEx pins to FSMC Alternate function */
    456            GPIOE->AFR[0]  = 0xc00000cc;
    457            GPIOE->AFR[1]  = 0xcccccccc;
    458            /* Configure PEx pins in Alternate function mode */ 
    459            GPIOE->MODER   = 0xaaaa800a;
    460            /* Configure PEx pins speed to 100 MHz */ 
    461            GPIOE->OSPEEDR = 0xffffc00f;
    462            /* Configure PEx pins Output type to push-pull */  
    463            GPIOE->OTYPER  = 0x00000000;
    464            /* No pull-up, pull-down for PEx pins */ 
    465            GPIOE->PUPDR   = 0x00000000;
    466          
    467            /* Connect PFx pins to FSMC Alternate function */
    468            GPIOF->AFR[0]  = 0x00cccccc;
    469            GPIOF->AFR[1]  = 0xcccc0000;
    470            /* Configure PFx pins in Alternate function mode */   
    471            GPIOF->MODER   = 0xaa000aaa;
    472            /* Configure PFx pins speed to 100 MHz */ 
    473            GPIOF->OSPEEDR = 0xff000fff;
    474            /* Configure PFx pins Output type to push-pull */  
    475            GPIOF->OTYPER  = 0x00000000;
    476            /* No pull-up, pull-down for PFx pins */ 
    477            GPIOF->PUPDR   = 0x00000000;
    478          
    479            /* Connect PGx pins to FSMC Alternate function */
    480            GPIOG->AFR[0]  = 0x00cccccc;
    481            GPIOG->AFR[1]  = 0x000000c0;
    482            /* Configure PGx pins in Alternate function mode */ 
    483            GPIOG->MODER   = 0x00080aaa;
    484            /* Configure PGx pins speed to 100 MHz */ 
    485            GPIOG->OSPEEDR = 0x000c0fff;
    486            /* Configure PGx pins Output type to push-pull */  
    487            GPIOG->OTYPER  = 0x00000000;
    488            /* No pull-up, pull-down for PGx pins */ 
    489            GPIOG->PUPDR   = 0x00000000;
    490            
    491          /*-- FSMC Configuration ------------------------------------------------------*/
    492            /* Enable the FSMC interface clock */
    493            RCC->AHB3ENR         = 0x00000001;
    494          
    495            /* Configure and enable Bank1_SRAM2 */
    496            FSMC_Bank1->BTCR[2]  = 0x00001015;
    497            FSMC_Bank1->BTCR[3]  = 0x00010400;
    498            FSMC_Bank1E->BWTR[2] = 0x0fffffff;
    499          /*
    500            Bank1_SRAM2 is configured as follow:
    501          
    502            p.FSMC_AddressSetupTime = 0;
    503            p.FSMC_AddressHoldTime = 0;
    504            p.FSMC_DataSetupTime = 4;
    505            p.FSMC_BusTurnAroundDuration = 1;
    506            p.FSMC_CLKDivision = 0;
    507            p.FSMC_DataLatency = 0;
    508            p.FSMC_AccessMode = FSMC_AccessMode_A;
    509          
    510            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
    511            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    512            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_PSRAM;
    513            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    514            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    515            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
    516            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    517            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    518            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    519            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    520            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    521            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    522            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    523            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
    524            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
    525          */
    526            
    527          }
    528          #endif /* DATA_IN_ExtSRAM */
    529          
    530          
    531          /**
    532            * @}
    533            */
    534          
    535          /**
    536            * @}
    537            */
    538            
    539          /**
    540            * @}
    541            */
    542          
    543          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SystemCoreClockUpdate
       8   SystemInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      20  AHBPrescTable
          SystemCoreClock
      92  SystemCoreClockUpdate
     178  SystemInit

 
  20 bytes in section .data
 310 bytes in section .text
 
 310 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
