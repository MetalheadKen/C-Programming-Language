###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/Aug/2015  14:25:58
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Utilities\STM32_EVAL\STM322xG_EVAL\stm322xg_eval.c
#    Command line =  
#        "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Utilities\STM32_EVAL\STM322xG_EVAL\stm322xg_eval.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL -lcN
#        "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\List\"
#        -o "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\Obj\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.20.2\arm\INC\c\DLib_Config_Full.h" -I "D:\Sample Code\Manta\2015 ARM
#        Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\Devices\STM32F2xx\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Core\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\STM32_EVAL\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\STM32_EVAL\Common\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\STM32_EVAL\STM322xG_EVAL\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\Third_Party\fat_fs\inc\"
#        -Oh --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.20.2\arm\CMSIS\Include\"
#    List file    =  
#        D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\List\stm322xg_eval.lst
#    Object file  =  
#        D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\Obj\stm322xg_eval.o
#
###############################################################################

D:\Sample Code\Manta\2015 ARM Design Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Utilities\STM32_EVAL\STM322xG_EVAL\stm322xg_eval.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm322xg_eval.c
      4            * @author  MCD Application Team
      5            * @version V5.1.0
      6            * @date    21-December-2012
      7            * @brief   This file provides
      8            *            - set of firmware functions to manage Leds, push-button and COM ports
      9            *            - low level initialization functions for SD card (on SDIO) and
     10            *              serial EEPROM (sEE)
     11            *          available on STM322xG-EVAL evaluation board(MB786) RevA and RevB 
     12            *          from STMicroelectronics.
     13            *
     14            ******************************************************************************
     15            * @attention
     16            *
     17            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     18            *
     19            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     20            * You may not use this file except in compliance with the License.
     21            * You may obtain a copy of the License at:
     22            *
     23            *        http://www.st.com/software_license_agreement_liberty_v2
     24            *
     25            * Unless required by applicable law or agreed to in writing, software 
     26            * distributed under the License is distributed on an "AS IS" BASIS, 
     27            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     28            * See the License for the specific language governing permissions and
     29            * limitations under the License.
     30            *
     31            ******************************************************************************
     32            */
     33          
     34          /* Includes ------------------------------------------------------------------*/
     35          #include "stm322xg_eval.h"
     36          #include "stm32f2xx_sdio.h"
     37          #include "stm32f2xx_dma.h"
     38          #include "stm32f2xx_i2c.h"
     39          
     40          /** @addtogroup Utilities
     41            * @{
     42            */ 
     43          
     44          /** @addtogroup STM32_EVAL
     45            * @{
     46            */ 
     47          
     48          /** @addtogroup STM322xG_EVAL
     49            * @{
     50            */   
     51              
     52          /** @defgroup STM322xG_EVAL_LOW_LEVEL 
     53            * @brief This file provides firmware functions to manage Leds, push-buttons, 
     54            *        COM ports, SD card on SDIO and serial EEPROM (sEE) available on 
     55            *        STM322xG-EVAL evaluation board from STMicroelectronics.
     56            * @{
     57            */ 
     58          
     59          /** @defgroup STM322xG_EVAL_LOW_LEVEL_Private_TypesDefinitions
     60            * @{
     61            */ 
     62          /**
     63            * @}
     64            */ 
     65          
     66          
     67          /** @defgroup STM322xG_EVAL_LOW_LEVEL_Private_Defines
     68            * @{
     69            */ 
     70          /**
     71            * @}
     72            */ 
     73          
     74          
     75          /** @defgroup STM322xG_EVAL_LOW_LEVEL_Private_Macros
     76            * @{
     77            */ 
     78          /**
     79            * @}
     80            */ 
     81          
     82          
     83          /** @defgroup STM322xG_EVAL_LOW_LEVEL_Private_Variables
     84            * @{
     85            */ 
     86          GPIO_TypeDef* GPIO_PORT[LEDn] = {LED1_GPIO_PORT, LED2_GPIO_PORT, LED3_GPIO_PORT,
     87                                           LED4_GPIO_PORT};
     88          const uint16_t GPIO_PIN[LEDn] = {LED1_PIN, LED2_PIN, LED3_PIN,
     89                                           LED4_PIN};
     90          const uint32_t GPIO_CLK[LEDn] = {LED1_GPIO_CLK, LED2_GPIO_CLK, LED3_GPIO_CLK,
     91                                           LED4_GPIO_CLK};
     92          
     93          GPIO_TypeDef* BUTTON_PORT[BUTTONn] = {WAKEUP_BUTTON_GPIO_PORT, TAMPER_BUTTON_GPIO_PORT,
     94                                                KEY_BUTTON_GPIO_PORT}; 
     95          
     96          const uint16_t BUTTON_PIN[BUTTONn] = {WAKEUP_BUTTON_PIN, TAMPER_BUTTON_PIN,
     97                                                KEY_BUTTON_PIN}; 
     98          
     99          const uint32_t BUTTON_CLK[BUTTONn] = {WAKEUP_BUTTON_GPIO_CLK, TAMPER_BUTTON_GPIO_CLK,
    100                                                KEY_BUTTON_GPIO_CLK};
    101          
    102          const uint16_t BUTTON_EXTI_LINE[BUTTONn] = {WAKEUP_BUTTON_EXTI_LINE,
    103                                                      TAMPER_BUTTON_EXTI_LINE, 
    104                                                      KEY_BUTTON_EXTI_LINE};
    105          
    106          const uint8_t BUTTON_PORT_SOURCE[BUTTONn] = {WAKEUP_BUTTON_EXTI_PORT_SOURCE,
    107                                                        TAMPER_BUTTON_EXTI_PORT_SOURCE, 
    108                                                        KEY_BUTTON_EXTI_PORT_SOURCE};
    109          								 
    110          const uint8_t BUTTON_PIN_SOURCE[BUTTONn] = {WAKEUP_BUTTON_EXTI_PIN_SOURCE,
    111                                                       TAMPER_BUTTON_EXTI_PIN_SOURCE, 
    112                                                       KEY_BUTTON_EXTI_PIN_SOURCE}; 
    113          const uint8_t BUTTON_IRQn[BUTTONn] = {WAKEUP_BUTTON_EXTI_IRQn, TAMPER_BUTTON_EXTI_IRQn,
    114                                                 KEY_BUTTON_EXTI_IRQn};
    115          
    116          USART_TypeDef* COM_USART[COMn] = {EVAL_COM1}; 
    117          
    118          GPIO_TypeDef* COM_TX_PORT[COMn] = {EVAL_COM1_TX_GPIO_PORT};
    119           
    120          GPIO_TypeDef* COM_RX_PORT[COMn] = {EVAL_COM1_RX_GPIO_PORT};
    121          
    122          const uint32_t COM_USART_CLK[COMn] = {EVAL_COM1_CLK};
    123          
    124          const uint32_t COM_TX_PORT_CLK[COMn] = {EVAL_COM1_TX_GPIO_CLK};
    125           
    126          const uint32_t COM_RX_PORT_CLK[COMn] = {EVAL_COM1_RX_GPIO_CLK};
    127          
    128          const uint16_t COM_TX_PIN[COMn] = {EVAL_COM1_TX_PIN};
    129          
    130          const uint16_t COM_RX_PIN[COMn] = {EVAL_COM1_RX_PIN};
    131           
    132          const uint8_t COM_TX_PIN_SOURCE[COMn] = {EVAL_COM1_TX_SOURCE};
    133          
    134          const uint8_t COM_RX_PIN_SOURCE[COMn] = {EVAL_COM1_RX_SOURCE};
    135           
    136          const uint8_t COM_TX_AF[COMn] = {EVAL_COM1_TX_AF};
    137           
    138          const uint8_t COM_RX_AF[COMn] = {EVAL_COM1_RX_AF};
    139          
    140          DMA_InitTypeDef    sEEDMA_InitStructure; 
    141          NVIC_InitTypeDef   NVIC_InitStructure;
    142          
    143          /**
    144            * @}
    145            */ 
    146          
    147          
    148          /** @defgroup STM322xG_EVAL_LOW_LEVEL_Private_FunctionPrototypes
    149            * @{
    150            */ 
    151          
    152          /**
    153            * @}
    154            */ 
    155          
    156          /** @defgroup STM322xG_EVAL_LOW_LEVEL_Private_Functions
    157            * @{
    158            */ 
    159          
    160          /**
    161            * @brief  Configures LED GPIO.
    162            * @param  Led: Specifies the Led to be configured. 
    163            *   This parameter can be one of following parameters:
    164            *     @arg LED1
    165            *     @arg LED2
    166            *     @arg LED3
    167            *     @arg LED4
    168            * @retval None
    169            */
    170          void STM_EVAL_LEDInit(Led_TypeDef Led)
    171          {
    172            GPIO_InitTypeDef  GPIO_InitStructure;
    173            
    174            /* Enable the GPIO_LED Clock */
    175            RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
    176          
    177          
    178            /* Configure the GPIO_LED pin */
    179            GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
    180            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    181            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    182            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    183            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    184            GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
    185          }
    186          
    187          /**
    188            * @brief  Turns selected LED On.
    189            * @param  Led: Specifies the Led to be set on. 
    190            *   This parameter can be one of following parameters:
    191            *     @arg LED1
    192            *     @arg LED2
    193            *     @arg LED3
    194            *     @arg LED4  
    195            * @retval None
    196            */
    197          void STM_EVAL_LEDOn(Led_TypeDef Led)
    198          {
    199            GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
    200          }
    201          
    202          /**
    203            * @brief  Turns selected LED Off.
    204            * @param  Led: Specifies the Led to be set off. 
    205            *   This parameter can be one of following parameters:
    206            *     @arg LED1
    207            *     @arg LED2
    208            *     @arg LED3
    209            *     @arg LED4 
    210            * @retval None
    211            */
    212          void STM_EVAL_LEDOff(Led_TypeDef Led)
    213          {
    214            GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
    215          }
    216          
    217          /**
    218            * @brief  Toggles the selected LED.
    219            * @param  Led: Specifies the Led to be toggled. 
    220            *   This parameter can be one of following parameters:
    221            *     @arg LED1
    222            *     @arg LED2
    223            *     @arg LED3
    224            *     @arg LED4  
    225            * @retval None
    226            */
    227          void STM_EVAL_LEDToggle(Led_TypeDef Led)
    228          {
    229            GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
    230          }
    231          
    232          /**
    233            * @brief  Configures Button GPIO and EXTI Line.
    234            * @param  Button: Specifies the Button to be configured.
    235            *   This parameter can be one of following parameters:   
    236            *     @arg BUTTON_WAKEUP: Wakeup Push Button
    237            *     @arg BUTTON_TAMPER: Tamper Push Button  
    238            *     @arg BUTTON_KEY: Key Push Button 
    239            *     @arg BUTTON_RIGHT: Joystick Right Push Button 
    240            *     @arg BUTTON_LEFT: Joystick Left Push Button 
    241            *     @arg BUTTON_UP: Joystick Up Push Button 
    242            *     @arg BUTTON_DOWN: Joystick Down Push Button
    243            *     @arg BUTTON_SEL: Joystick Sel Push Button
    244            * @param  Button_Mode: Specifies Button mode.
    245            *   This parameter can be one of following parameters:   
    246            *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
    247            *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
    248            *                     generation capability  
    249            * @retval None
    250            */
    251          void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    252          {
    253            GPIO_InitTypeDef GPIO_InitStructure;
    254            EXTI_InitTypeDef EXTI_InitStructure;
    255            NVIC_InitTypeDef NVIC_InitStructure;
    256          
    257          
    258            /* Enable the BUTTON Clock */
    259            RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
    260            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    261          
    262            /* Configure Button pin as input */
    263            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    264            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    265            GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
    266            GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
    267          
    268          
    269            if (Button_Mode == BUTTON_MODE_EXTI)
    270            {
    271              /* Connect Button EXTI Line to Button GPIO Pin */
    272              SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
    273          
    274              /* Configure Button EXTI line */
    275              EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    276              EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    277          
    278              if(Button != BUTTON_WAKEUP)
    279              {
    280                EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
    281              }
    282              else
    283              {
    284                EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    285              }
    286              EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    287              EXTI_Init(&EXTI_InitStructure);
    288          
    289              /* Enable and set Button EXTI Interrupt to the lowest priority */
    290              NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
    291              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    292              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    293              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    294          
    295              NVIC_Init(&NVIC_InitStructure); 
    296            }
    297          }
    298          
    299          /**
    300            * @brief  Returns the selected Button state.
    301            * @param  Button: Specifies the Button to be checked.
    302            *   This parameter can be one of following parameters:    
    303            *     @arg BUTTON_WAKEUP: Wakeup Push Button
    304            *     @arg BUTTON_TAMPER: Tamper Push Button  
    305            *     @arg BUTTON_KEY: Key Push Button 
    306            *     @arg BUTTON_RIGHT: Joystick Right Push Button 
    307            *     @arg BUTTON_LEFT: Joystick Left Push Button 
    308            *     @arg BUTTON_UP: Joystick Up Push Button 
    309            *     @arg BUTTON_DOWN: Joystick Down Push Button
    310            *     @arg BUTTON_SEL: Joystick Sel Push Button    
    311            * @retval The Button GPIO pin value.
    312            */
    313          uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
    314          {
    315            return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
    316          }
    317          
    318          
    319          /**
    320            * @brief  Configures COM port.
    321            * @param  COM: Specifies the COM port to be configured.
    322            *   This parameter can be one of following parameters:    
    323            *     @arg COM1
    324            *     @arg COM2  
    325            * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
    326            *   contains the configuration information for the specified USART peripheral.
    327            * @retval None
    328            */
    329          void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
    330          {
    331            GPIO_InitTypeDef GPIO_InitStructure;
    332          
    333            /* Enable GPIO clock */
    334            RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
    335          
    336            if (COM == COM1)
    337            {
    338              /* Enable UART clock */
    339              RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
    340            }
    341          
    342            /* Connect PXx to USARTx_Tx*/
    343            GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
    344          
    345            /* Connect PXx to USARTx_Rx*/
    346            GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
    347          
    348            /* Configure USART Tx as alternate function  */
    349            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    350            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    351            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    352          
    353            GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
    354            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    355            GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
    356          
    357            /* Configure USART Rx as alternate function  */
    358            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    359            GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
    360            GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
    361          
    362            /* USART configuration */
    363            USART_Init(COM_USART[COM], USART_InitStruct);
    364              
    365            /* Enable USART */
    366            USART_Cmd(COM_USART[COM], ENABLE);
    367          }
    368          
    369          /**
    370            * @brief  DeInitializes the SDIO interface.
    371            * @param  None
    372            * @retval None
    373            */
    374          void SD_LowLevel_DeInit(void)
    375          {
    376            GPIO_InitTypeDef  GPIO_InitStructure;
    377            
    378            /*!< Disable SDIO Clock */
    379            SDIO_ClockCmd(DISABLE);
    380            
    381            /*!< Set Power State to OFF */
    382            SDIO_SetPowerState(SDIO_PowerState_OFF);
    383          
    384            /*!< DeInitializes the SDIO peripheral */
    385            SDIO_DeInit();
    386            
    387            /* Disable the SDIO APB2 Clock */
    388            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, DISABLE);
    389          
    390            GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_MCO);
    391            GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
    392            GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
    393            GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_MCO);
    394            GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_MCO);
    395            GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_MCO);
    396          
    397            /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
    398            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
    399            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    400            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    401            GPIO_Init(GPIOC, &GPIO_InitStructure);
    402          
    403            /* Configure PD.02 CMD line */
    404            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    405            GPIO_Init(GPIOD, &GPIO_InitStructure);
    406          
    407            /* Configure PC.12 pin: CLK pin */
    408            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
    409            GPIO_Init(GPIOC, &GPIO_InitStructure);
    410          }
    411          
    412          /**
    413            * @brief  Initializes the SD Card and put it into StandBy State (Ready for 
    414            *         data transfer).
    415            * @param  None
    416            * @retval None
    417            */
    418          void SD_LowLevel_Init(void)
    419          {
    420            GPIO_InitTypeDef  GPIO_InitStructure;
    421          
    422            /* GPIOC and GPIOD Periph clock enable */
    423            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
    424          
    425            GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
    426            GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
    427            GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
    428            GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
    429            GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
    430            GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
    431          
    432            /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
    433            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
    434            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    435            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    436            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    437            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    438            GPIO_Init(GPIOC, &GPIO_InitStructure);
    439          
    440            /* Configure PD.02 CMD line */
    441            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    442            GPIO_Init(GPIOD, &GPIO_InitStructure);
    443          
    444            /* Configure PC.12 pin: CLK pin */
    445            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
    446            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    447            GPIO_Init(GPIOC, &GPIO_InitStructure);
    448            
    449            /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
    450            GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
    451            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    452            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    453            GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
    454          
    455            /* Enable the SDIO APB2 Clock */
    456            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
    457          
    458            /* Enable the DMA2 Clock */
    459            RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
    460          }
    461          
    462          /**
    463            * @brief  Configures the DMA2 Channel4 for SDIO Tx request.
    464            * @param  BufferSRC: pointer to the source buffer
    465            * @param  BufferSize: buffer size
    466            * @retval None
    467            */
    468          void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
    469          {
    470            DMA_InitTypeDef SDDMA_InitStructure;
    471          
    472            DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
    473          
    474            /* DMA2 Stream3  or Stream6 disable */
    475            DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
    476          
    477            /* DMA2 Stream3  or Stream6 Config */
    478            DMA_DeInit(SD_SDIO_DMA_STREAM);
    479          
    480            SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
    481            SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
    482            SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
    483            SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
    484            SDDMA_InitStructure.DMA_BufferSize = 0;
    485            SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    486            SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    487            SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    488            SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
    489            SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
    490            SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
    491            SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
    492            SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
    493            SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
    494            SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
    495            DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
    496            DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
    497            DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
    498          
    499            /* DMA2 Stream3  or Stream6 enable */
    500            DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
    501              
    502          }
    503          
    504          /**
    505            * @brief  Configures the DMA2 Channel4 for SDIO Rx request.
    506            * @param  BufferDST: pointer to the destination buffer
    507            * @param  BufferSize: buffer size
    508            * @retval None
    509            */
    510          void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
    511          {
    512            DMA_InitTypeDef SDDMA_InitStructure;
    513          
    514            DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
    515          
    516            /* DMA2 Stream3  or Stream6 disable */
    517            DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
    518          
    519            /* DMA2 Stream3 or Stream6 Config */
    520            DMA_DeInit(SD_SDIO_DMA_STREAM);
    521          
    522            SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
    523            SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
    524            SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
    525            SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    526            SDDMA_InitStructure.DMA_BufferSize = 0;
    527            SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    528            SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    529            SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    530            SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
    531            SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
    532            SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
    533            SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
    534            SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
    535            SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
    536            SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
    537            DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
    538            DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
    539            DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
    540          
    541            /* DMA2 Stream3 or Stream6 enable */
    542            DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
    543          }
    544          
    545          /**
    546            * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
    547            * @param  None
    548            * @retval None
    549            */
    550          void sEE_LowLevel_DeInit(void)
    551          {
    552            GPIO_InitTypeDef  GPIO_InitStructure; 
    553             
    554            /* sEE_I2C Peripheral Disable */
    555            I2C_Cmd(sEE_I2C, DISABLE);
    556           
    557            /* sEE_I2C DeInit */
    558            I2C_DeInit(sEE_I2C);
    559          
    560            /*!< sEE_I2C Periph clock disable */
    561            RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
    562              
    563            /*!< GPIO configuration */  
    564            /*!< Configure sEE_I2C pins: SCL */
    565            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
    566            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    567            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    568            GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
    569          
    570            /*!< Configure sEE_I2C pins: SDA */
    571            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
    572            GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
    573          
    574            /* Configure and enable I2C DMA TX Stream interrupt */
    575            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
    576            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    577            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    578            NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    579            NVIC_Init(&NVIC_InitStructure);
    580          
    581            /* Configure and enable I2C DMA RX Stream interrupt */
    582            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
    583            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    584            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    585            NVIC_Init(&NVIC_InitStructure);   
    586            
    587            /* Disable and Deinitialize the DMA Streams */
    588            DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
    589            DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
    590            DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
    591            DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
    592          }
    593          
    594          /**
    595            * @brief  Initializes peripherals used by the I2C EEPROM driver.
    596            * @param  None
    597            * @retval None
    598            */
    599          void sEE_LowLevel_Init(void)
    600          {
    601            GPIO_InitTypeDef  GPIO_InitStructure; 
    602             
    603            /*!< sEE_I2C Periph clock enable */
    604            RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
    605            
    606            /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
    607            RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
    608          
    609            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    610            
    611            /* Reset sEE_I2C IP */
    612            RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);
    613            
    614            /* Release reset signal of sEE_I2C IP */
    615            RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
    616              
    617            /*!< GPIO configuration */
    618            /* Connect PXx to I2C_SCL*/
    619            GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
    620            /* Connect PXx to I2C_SDA*/
    621            GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
    622            
    623            /*!< Configure sEE_I2C pins: SCL */   
    624            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
    625            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    626            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    627            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    628            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    629            GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
    630            /*!< Configure sEE_I2C pins: SDA */
    631            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
    632            GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
    633          
    634           
    635            /* Configure and enable I2C DMA TX Channel interrupt */
    636            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
    637            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    638            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    639            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    640            NVIC_Init(&NVIC_InitStructure);
    641          
    642            /* Configure and enable I2C DMA RX Channel interrupt */
    643            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
    644            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    645            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    646            NVIC_Init(&NVIC_InitStructure);  
    647            
    648            /*!< I2C DMA TX and RX channels configuration */
    649            /* Enable the DMA clock */
    650            RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
    651            
    652            /* Clear any pending flag on Rx Stream  */
    653            DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
    654                                                 sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
    655            /* Disable the EE I2C Tx DMA stream */
    656            DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
    657            /* Configure the DMA stream for the EE I2C peripheral TX direction */
    658            DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
    659            sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
    660            sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
    661            sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
    662            sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
    663            sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
    664            sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    665            sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    666            sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    667            sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    668            sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
    669            sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
    670            sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
    671            sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
    672            sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    673            sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
    674            DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
    675          
    676            /* Clear any pending flag on Rx Stream */
    677            DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
    678                                                 sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
    679            /* Disable the EE I2C DMA Rx stream */
    680            DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
    681            /* Configure the DMA stream for the EE I2C peripheral RX direction */
    682            DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
    683            DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
    684            
    685            /* Enable the DMA Channels Interrupts */
    686            DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
    687            DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
    688          }
    689          
    690          /**
    691            * @brief  Initializes DMA channel used by the I2C EEPROM driver.
    692            * @param  None
    693            * @retval None
    694            */
    695          void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
    696          { 
    697            /* Initialize the DMA with the new parameters */
    698            if (Direction == sEE_DIRECTION_TX)
    699            {
    700              /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    701              sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    702              sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
    703              sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
    704              DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
    705            }
    706            else
    707            { 
    708              /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    709              sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    710              sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    711              sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
    712              DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
    713            }
    714          }
    715          
    716          /**
    717            * @}
    718            */ 
    719          
    720          
    721          /**
    722            * @}
    723            */ 
    724          
    725          /**
    726            * @}
    727            */
    728          
    729          /**
    730            * @}
    731            */    
    732          
    733          /**
    734            * @}
    735            */ 
    736              
    737          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   SD_LowLevel_DMA_RxConfig
        72   -> DMA_ClearFlag
        72   -> DMA_Cmd
        72   -> DMA_DeInit
        72   -> DMA_FlowControllerConfig
        72   -> DMA_ITConfig
        72   -> DMA_Init
      72   SD_LowLevel_DMA_TxConfig
        72   -> DMA_ClearFlag
        72   -> DMA_Cmd
        72   -> DMA_DeInit
        72   -> DMA_FlowControllerConfig
        72   -> DMA_ITConfig
        72   -> DMA_Init
      24   SD_LowLevel_DeInit
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> RCC_APB2PeriphClockCmd
        24   -> SDIO_ClockCmd
        24   -> SDIO_DeInit
        24   -> SDIO_SetPowerState
      24   SD_LowLevel_Init
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> RCC_AHB1PeriphClockCmd
        24   -> RCC_APB2PeriphClockCmd
      32   STM_EVAL_COMInit
        32   -> GPIO_Init
        32   -> GPIO_PinAFConfig
        32   -> RCC_AHB1PeriphClockCmd
        32   -> RCC_APB1PeriphClockCmd
        32   -> USART_Cmd
        32   -> USART_Init
      16   STM_EVAL_LEDInit
        16   -> GPIO_Init
        16   -> RCC_AHB1PeriphClockCmd
       0   STM_EVAL_LEDOff
       0   STM_EVAL_LEDOn
       0   STM_EVAL_LEDToggle
       0   STM_EVAL_PBGetState
         0   -> GPIO_ReadInputDataBit
      40   STM_EVAL_PBInit
        40   -> EXTI_Init
        40   -> GPIO_Init
        40   -> NVIC_Init
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB2PeriphClockCmd
        40   -> SYSCFG_EXTILineConfig
       0   sEE_LowLevel_DMAConfig
         0   -> DMA_Init
      24   sEE_LowLevel_DeInit
        24   -> DMA_Cmd
        24   -> DMA_DeInit
        24   -> GPIO_Init
        24   -> I2C_Cmd
        24   -> I2C_DeInit
        24   -> NVIC_Init
        24   -> RCC_APB1PeriphClockCmd
      24   sEE_LowLevel_Init
        24   -> DMA_ClearFlag
        24   -> DMA_Cmd
        24   -> DMA_DeInit
        24   -> DMA_ITConfig
        24   -> DMA_Init
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> NVIC_Init
        24   -> RCC_AHB1PeriphClockCmd
        24   -> RCC_APB1PeriphClockCmd
        24   -> RCC_APB1PeriphResetCmd
        24   -> RCC_APB2PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable29
       4  ??DataTable29_1
       4  ??DataTable29_10
       4  ??DataTable29_11
       4  ??DataTable29_12
       4  ??DataTable29_13
       4  ??DataTable29_14
       4  ??DataTable29_15
       4  ??DataTable29_2
       4  ??DataTable29_3
       4  ??DataTable29_4
       4  ??DataTable29_5
       4  ??DataTable29_6
       4  ??DataTable29_7
       4  ??DataTable29_8
       4  ??DataTable29_9
      88  ?Subroutine0
      12  BUTTON_CLK
       8  BUTTON_EXTI_LINE
       4  BUTTON_IRQn
       8  BUTTON_PIN
       4  BUTTON_PIN_SOURCE
      12  BUTTON_PORT
       4  BUTTON_PORT_SOURCE
       1  COM_RX_AF
       2  COM_RX_PIN
       1  COM_RX_PIN_SOURCE
       4  COM_RX_PORT_CLK
       1  COM_TX_AF
       2  COM_TX_PIN
       1  COM_TX_PIN_SOURCE
       4  COM_TX_PORT_CLK
      12  COM_USART
          COM_TX_PORT
          COM_RX_PORT
       4  COM_USART_CLK
      16  GPIO_CLK
       8  GPIO_PIN
      16  GPIO_PORT
      64  NVIC_InitStructure
          sEEDMA_InitStructure
      50  SD_LowLevel_DMA_RxConfig
      54  SD_LowLevel_DMA_TxConfig
     152  SD_LowLevel_DeInit
     194  SD_LowLevel_Init
     180  STM_EVAL_COMInit
      68  STM_EVAL_LEDInit
      20  STM_EVAL_LEDOff
      20  STM_EVAL_LEDOn
      24  STM_EVAL_LEDToggle
      20  STM_EVAL_PBGetState
     164  STM_EVAL_PBInit
      34  sEE_LowLevel_DMAConfig
     138  sEE_LowLevel_DeInit
     316  sEE_LowLevel_Init

 
    64 bytes in section .bss
    40 bytes in section .data
     4 bytes in section .rodata
 1 666 bytes in section .text
 
 1 666 bytes of CODE  memory
     4 bytes of CONST memory
   104 bytes of DATA  memory

Errors: none
Warnings: none
