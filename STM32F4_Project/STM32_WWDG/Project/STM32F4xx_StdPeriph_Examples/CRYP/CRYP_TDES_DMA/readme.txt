/**
  @page CRYP_TDES_DMA  Encrypt and Decrypt data using TDES Algo in ECB mode, with DMA

  @verbatim
  ******************** (C) COPYRIGHT 2013 STMicroelectronics *******************
  * @file    CRYP/CRYP_TDES_DMA/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.0
  * @date    18-January-2013
  * @brief   Description of the CRYP TDES Algorithm in ECB mode with DMA Example
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example provides a short description of how to use the CRYPTO peripheral to 
encrypt and decrypt data using TDES Algorithm.

For this example, DMA is used to transfer data from memory to the CRYPTO processor
IN FIFO and also to transfer data from CRYPTO processor OUT FIFO to memory.

The data to be encrypted is a 320 bit data, which correspond to 5 TDES Blocks.

This example behaves as follow:
- TDES Encryption   (PlainData --> EncryptedData)
- TDES Decryption   (EncryptedData --> DecryptedData)

The Plain data, encrypted data and decrypted data can be displayed on a PC 
HyperTerminal using the USART (CN16).

The USARTx is configured as follow:
    - BaudRate = 115200 baud
    - Word Length = 8 Bits
    - One Stop Bit
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled


@par Directory contents 

  - CRYP/CRYP_TDES_DMA/system_stm32f4xx.c   STM32F4xx system clock configuration file
  - CRYP/CRYP_TDES_DMA/stm32f4xx_conf.h     Library Configuration file
  - CRYP/CRYP_TDES_DMA/stm32f4xx_it.h       Interrupt handlers header file
  - CRYP/CRYP_TDES_DMA/stm32f4xx_it.c       Interrupt handlers
  - CRYP/CRYP_TDES_DMA/main.c               Main program
  - CRYP/CRYP_TDES_DMA/main.h               Main header

@note The "system_stm32f4xx.c" is generated by an automatic clock configuration
      tool and can be easily customized to your own configuration.
      To select different clock setup, use the "STM32F4xx_Clock_Configuration_V1.1.0.xls" 
      provided with the AN3988 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>


@par Hardware and Software environment 

  - This example runs only on STM32F41xx/STM32F437x Devices.
  
  - This example has been tested with STMicroelectronics STM324xG-EVAL and STM32437I-EVAL 
    evaluation boards and can be easily tailored to any other supported device
    and development board.

  - STM324xG-EVAL/STM32437I-EVAL Set-up 
    - Connect a null-modem female/female RS232 cable between the DB9 connector 
      CN16 (USART3) and PC serial port.
      @note Make sure that jumper JP22 is in position 1-2

  - Hyperterminal configuration:
    - Word Length = 8 Bits
    - One Stop Bit
    - No parity
    - BaudRate = 115200 baud
    - flow control: None


@par How to use it ?

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F4xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
