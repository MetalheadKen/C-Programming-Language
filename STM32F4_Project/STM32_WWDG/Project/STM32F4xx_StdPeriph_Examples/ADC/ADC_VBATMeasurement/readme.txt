/**
  @page ADC_VBATMeasurement ADC_VBAT_Measurement

  @verbatim
  ******************** (C) COPYRIGHT 2013 STMicroelectronics *******************
  * @file    ADC/ADC_VBATMeasurement/readme.txt
  * @author  MCD Application Team
  * @version V1.1.0
  * @date    18-January-2013
  * @brief   Description of the ADC1 VBAT Measurement example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example describes how to measure VBAT voltage using ADC1 regular channel 18.
In fact, the measured value correspond to VBAT/2; as the VBAT voltage could be higher
than VDDA, to ensure the correct operation of the ADC, the VBAT pin is internally
connected to a bridge divider by 2.

In this example the VBAT/2 voltage is continuously converted, each time an end
of conversion occurs the DMA transfers, in circular mode, the converted data from 
ADC1 DR register to the uwADCConvertedValue variable.  
However, in real application to prevent any unwanted consumption on the battery,
it is recommended to enable the bridge divider only when needed for ADC
conversion then disable it.

User can display the VBAT voltage on the Eval Board LCD (when the define USE_LCD
is enabled in main.h)

In this example, the system clock is 144MHz, APB2 =72MHz and ADC clock = APB2 /2.
So ADCCLK= 36MHz 

Conversion rate of Vbat channel  = Sampling Time + Conversion Time = 15 + 12 cycles
                                 = 27 cycles ==> Conversion Time = 36MHz/27cyc = 1.33Msps.


@par Directory contents 

  - ADC/ADC_VBATMeasurement/system_stm32f4xx.c   STM32F4xx system clock configuration file 
  - ADC/ADC_VBATMeasurement/stm32f4xx_conf.h     Library Configuration file
  - ADC/ADC_VBATMeasurement/stm32f4xx_it.c       Interrupt handlers
  - ADC/ADC_VBATMeasurement/stm32f4xx_it.h       Interrupt handlers header file
  - ADC/ADC_VBATMeasurement/main.c               Main program
  - ADC/ADC_VBATMeasurement/main.h               Main program header file
  
@note The "system_stm32f4xx.c" is generated by an automatic clock configuration
      tool and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F4xx_Clock_Configuration_V1.1.0.xls" 
      provided with the AN3988 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a> 


@par Hardware and Software environment  
  - This example runs on STM32F40xx/STM32F41xx, STM32F427x/STM32F437x Devices.
    
  - This example has been tested with STMicroelectronics STM324xG-EVAL (STM32F40xx/
    STM32F41xx Devices) and STM32437I-EVAL (STM32F427x/STM32F437x Devices) evaluation 
    boards and can be easily tailored to any other supported device and development 
    board.


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F4xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
