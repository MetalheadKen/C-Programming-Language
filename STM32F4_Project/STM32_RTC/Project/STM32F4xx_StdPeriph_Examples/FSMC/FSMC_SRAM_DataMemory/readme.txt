/**
  @page FSMC_SRAM_DataMemory FSMC SRAM DataMemory example
  
  @verbatim
  ******************* (C) COPYRIGHT 2013 STMicroelectronics ********************
  * @file    FSMC/FSMC_SRAM_DataMemory/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.0
  * @date    18-January-2013
  * @brief   Description of the FSMC SRAM_DataMemory example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  @endverbatim
 
@par Example Description 

  This example shows how to use the SRAM mounted on on STM3240_41_G_EVAL or STM32437I_EVAL 
  board as program data memory (including heap and stack).
  
  The example scenario does not reflect a real application case; its purpose is to
  provide only the procedure to follow to use the external SRAM as data memory.

  This example does not use the default library startup file. It uses a modified 
  startup file provided with the example. While startup, the SRAM memory is configured 
  and initialized to be ready to contain data.
  
  The user have to configure his preferred toolchain using the provided linker file.
  The RAM zone is modified in order to use the external memory as a RAM. 
 
@par Directory contents
                       
 - FSMC/FSMC_SRAM_DataMemory/system_stm32f4xx.c          STM32F4xx system clock configuration file 
 - FSMC/FSMC_SRAM_DataMemory/stm32f4xx_conf.h            Library Configuration file
 - FSMC/FSMC_SRAM_DataMemory/stm32f4xx_it.c              Interrupt handlers
 - FSMC/FSMC_SRAM_DataMemory/stm32f4xx_it.h              Header for stm32f4xx_it.c
 - FSMC/FSMC_SRAM_DataMemory/main.c                      Main program   
 - FSMC/FSMC_SRAM_DataMemory/main.h                      Header for main.c module 
 - FSMC/FSMC_SRAM_DataMemory/startup                     Directory containing startup file for each toolchain               
 
@note The "system_stm32f4xx.c" is generated by an automatic clock configuration 
       tool and can be easily customized to your own configuration. 
       To select different clock setup, use the "STM32F4xx_Clock_Configuration_V1.1.0.xls" 
       provided with the AN3988 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>

      
@par Hardware and Software environment 

  - This example runs on STM32F40xx/STM32F41xx, STM32F427x/STM32F437x Devices.
    
  - This example has been tested with STMicroelectronics STM324xG-EVAL (STM32F40xx/
    STM32F41xx Devices) and STM32437I-EVAL (STM32F427x/STM32F437x Devices) evaluation 
    boards and can be easily tailored to any other supported device and development 
    board.


@par How to use it ? 

 In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F4xx_StdPeriph_Templates
 - Open your preferred toolchain
 - Add the following file in the project source list:
   - STM324xG_EVAL: 
     Utilities\STM32_EVAL\STM324xG_EVAL\stm324xg_eval_fsmc_sram.c
           
   - STM324x7I_EVAL: 
     Utilities\STM32_EVAL\STM324x7I_EVAL\stm324x7i_eval_fsmc_sram.c
 - Update your project settings as follows:
<ul>
 <li> MDK-ARM 
    - in Project->Options for Linker window, un-check the option "Use Memory Layout
      from Target Dialog". You can then import the scatter file dedicated for this 
      example.
    - uncomment "#define DATA_IN_ExtSRAM " in the "system_stm32f4xx.c" file               

 <li> EWARM 
    - use "stm32f4xx_flash_extsram.icf" as linker file (under Project\STM32F4xx_StdPeriph_Templates\EWARM)
    - uncomment "#define DATA_IN_ExtSRAM " in the "system_stm32f4xx.c" file

 <li> RIDE 
    - In the Application options -> script menu, set "Use Default Script File" 
      to "No" and use "stm32f4xx_flash_extsram.ld" as Script File.
    - uncomment "#define DATA_IN_ExtSRAM " in the "system_stm32f4xx.c" file

<li> TASKING 
    -In the project properties window, select C/C++ Build->settings node then 
         the  "Linker->Script file"  and use "stm32f4xx_extsram.lsl" as Script File.
    - uncomment "#define DATA_IN_ExtSRAM " in the "system_stm32f4xx.c" file
  
 <li> TrueSTUDIO 
    - In the project properties window, select 'C/C++ Build'->settings node then 
      the 'C Linker'->General node and use "stm32f4xx_flash_extsram.ld" as Script File
      (under Project\STM32F4xx_StdPeriph_Templates\TrueSTUDIO).
    - uncomment "#define DATA_IN_ExtSRAM " in the "system_stm32f4xx.c" file
      
</ul>

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
