###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/Aug/2015  14:25:56
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Utilities\Third_Party\fat_fs\src\ff.c
#    Command line =  
#        "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Utilities\Third_Party\fat_fs\src\ff.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL -lcN
#        "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\List\"
#        -o "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\Obj\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.20.2\arm\INC\c\DLib_Config_Full.h" -I "D:\Sample Code\Manta\2015 ARM
#        Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\Devices\STM32F2xx\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Core\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\STM32_EVAL\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\STM32_EVAL\Common\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\STM32_EVAL\STM322xG_EVAL\"
#        -I "D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\..\..\..\Utilities\Third_Party\fat_fs\inc\"
#        -Oh --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.20.2\arm\CMSIS\Include\"
#    List file    =  
#        D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\List\ff.lst
#    Object file  =  
#        D:\Sample Code\Manta\2015 ARM Design
#        Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Project\FatFS_uSD\EWARM\STM322xG-EVAL\Obj\ff.o
#
###############################################################################

D:\Sample Code\Manta\2015 ARM Design Contest\STM32_FatFS_Example_V1.0.0RC4\STM32_FatFS_Example_V1.0.0RC4\Utilities\Third_Party\fat_fs\src\ff.c
      1          /*----------------------------------------------------------------------------/
      2          /  FatFs - FAT file system module  R0.09                  (C)ChaN, 2011
      3          /-----------------------------------------------------------------------------/
      4          / FatFs module is a generic FAT file system module for small embedded systems.
      5          / This is a free software that opened for education, research and commercial
      6          / developments under license policy of following terms.
      7          /
      8          /  Copyright (C) 2011, ChaN, all right reserved.
      9          /
     10          / * The FatFs module is a free software and there is NO WARRANTY.
     11          / * No restriction on use. You can use, modify and redistribute it for
     12          /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
     13          / * Redistributions of source code must retain the above copyright notice.
     14          /
     15          /-----------------------------------------------------------------------------/
     16          / Feb 26,'06 R0.00  Prototype.
     17          /
     18          / Apr 29,'06 R0.01  First stable version.
     19          /
     20          / Jun 01,'06 R0.02  Added FAT12 support.
     21          /                   Removed unbuffered mode.
     22          /                   Fixed a problem on small (<32M) partition.
     23          / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
     24          /
     25          / Sep 22,'06 R0.03  Added f_rename().
     26          /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
     27          / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
     28          /                   Fixed f_mkdir() creates incorrect directory on FAT32.
     29          /
     30          / Feb 04,'07 R0.04  Supported multiple drive system.
     31          /                   Changed some interfaces for multiple drive system.
     32          /                   Changed f_mountdrv() to f_mount().
     33          /                   Added f_mkfs().
     34          / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
     35          /                   Added a capability of extending file size to f_lseek().
     36          /                   Added minimization level 3.
     37          /                   Fixed an endian sensitive code in f_mkfs().
     38          / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
     39          /                   Added FSInfo support.
     40          /                   Fixed DBCS name can result FR_INVALID_NAME.
     41          /                   Fixed short seek (<= csize) collapses the file object.
     42          /
     43          / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
     44          /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
     45          /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
     46          / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
     47          /                   Fixed off by one error at FAT sub-type determination.
     48          /                   Fixed btr in f_read() can be mistruncated.
     49          /                   Fixed cached sector is not flushed when create and close without write.
     50          /
     51          / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
     52          /                   Improved performance of f_lseek() on moving to the same or following cluster.
     53          /
     54          / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
     55          /                   Added long file name feature.
     56          /                   Added multiple code page feature.
     57          /                   Added re-entrancy for multitask operation.
     58          /                   Added auto cluster size selection to f_mkfs().
     59          /                   Added rewind option to f_readdir().
     60          /                   Changed result code of critical errors.
     61          /                   Renamed string functions to avoid name collision.
     62          / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
     63          /                   Added multiple sector size feature.
     64          / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
     65          /                   Fixed wrong cache control in f_lseek().
     66          /                   Added relative path feature.
     67          /                   Added f_chdir() and f_chdrive().
     68          /                   Added proper case conversion to extended char.
     69          / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
     70          /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
     71          /                   Fixed name matching error on the 13 char boundary.
     72          /                   Added a configuration option, _LFN_UNICODE.
     73          /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
     74          /
     75          / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
     76          /                   Added file lock feature. (_FS_SHARE)
     77          /                   Added fast seek feature. (_USE_FASTSEEK)
     78          /                   Changed some types on the API, XCHAR->TCHAR.
     79          /                   Changed fname member in the FILINFO structure on Unicode cfg.
     80          /                   String functions support UTF-8 encoding files on Unicode cfg.
     81          / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
     82          /                   Added sector erase feature. (_USE_ERASE)
     83          /                   Moved file lock semaphore table from fs object to the bss.
     84          /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name contains ';'.
     85          /                   Fixed f_mkfs() creates wrong FAT32 volume.
     86          / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
     87          /                   f_lseek() reports required table size on creating CLMP.
     88          /                   Extended format syntax of f_printf function.
     89          /                   Ignores duplicated directory separators in given path names.
     90          /
     91          / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to finish the multiple partition feature.
     92          /                   Added f_fdisk(). (_MULTI_PARTITION = 2)
     93          /---------------------------------------------------------------------------*/
     94          
     95          #include "ff.h"			/* FatFs configurations and declarations */
     96          #include "diskio.h"		/* Declarations of low level disk I/O functions */
     97          
     98          
     99          /*--------------------------------------------------------------------------
    100          
    101             Module Private Definitions
    102          
    103          ---------------------------------------------------------------------------*/
    104          
    105          #if _FATFS != 6502	/* Revision ID */
    106          #error Wrong include file (ff.h).
    107          #endif
    108          
    109          
    110          /* Definitions on sector size */
    111          #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
    112          #error Wrong sector size.
    113          #endif
    114          #if _MAX_SS != 512
    115          #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
    116          #else
    117          #define	SS(fs)	512U			/* Fixed sector size */
    118          #endif
    119          
    120          
    121          /* Reentrancy related */
    122          #if _FS_REENTRANT
    123          #if _USE_LFN == 1
    124          #error Static LFN work area must not be used in re-entrant configuration.
    125          #endif
    126          #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
    127          #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
    128          #else
    129          #define	ENTER_FF(fs)
    130          #define LEAVE_FF(fs, res)	return res
    131          #endif
    132          
    133          #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
    134          
    135          
    136          /* File shareing feature */
    137          #if _FS_SHARE
    138          #if _FS_READONLY
    139          #error _FS_SHARE must be 0 on read-only cfg.
    140          #endif
    141          typedef struct {
    142          	FATFS *fs;				/* File ID 1, volume (NULL:blank entry) */
    143          	DWORD clu;				/* File ID 2, directory */
    144          	WORD idx;				/* File ID 3, directory index */
    145          	WORD ctr;				/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode */
    146          } FILESEM;
    147          #endif
    148          
    149          
    150          /* Misc definitions */
    151          #define LD_CLUST(dir)	(((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
    152          #define ST_CLUST(dir,cl) {ST_WORD(dir+DIR_FstClusLO, cl); ST_WORD(dir+DIR_FstClusHI, (DWORD)cl>>16);}
    153          
    154          
    155          /* DBCS code ranges and SBCS extend char conversion table */
    156          
    157          #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
    158          #define _DF1S	0x81	/* DBC 1st byte range 1 start */
    159          #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
    160          #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
    161          #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
    162          #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
    163          #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
    164          #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
    165          #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
    166          
    167          #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
    168          #define _DF1S	0x81
    169          #define _DF1E	0xFE
    170          #define _DS1S	0x40
    171          #define _DS1E	0x7E
    172          #define _DS2S	0x80
    173          #define _DS2E	0xFE
    174          
    175          #elif _CODE_PAGE == 949	/* Korean */
    176          #define _DF1S	0x81
    177          #define _DF1E	0xFE
    178          #define _DS1S	0x41
    179          #define _DS1E	0x5A
    180          #define _DS2S	0x61
    181          #define _DS2E	0x7A
    182          #define _DS3S	0x81
    183          #define _DS3E	0xFE
    184          
    185          #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
    186          #define _DF1S	0x81
    187          #define _DF1E	0xFE
    188          #define _DS1S	0x40
    189          #define _DS1E	0x7E
    190          #define _DS2S	0xA1
    191          #define _DS2E	0xFE
    192          
    193          #elif _CODE_PAGE == 437	/* U.S. (OEM) */
    194          #define _DF1S	0
    195          #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    196          				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    197          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    198          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    199          
    200          #elif _CODE_PAGE == 720	/* Arabic (OEM) */
    201          #define _DF1S	0
    202          #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x90,0x92,0x92,0x93,0x94,0x95,0x49,0x49,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    203          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    204          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    205          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    206          
    207          #elif _CODE_PAGE == 737	/* Greek (OEM) */
    208          #define _DF1S	0
    209          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
    210          				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    211          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    212          				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    213          
    214          #elif _CODE_PAGE == 775	/* Baltic (OEM) */
    215          #define _DF1S	0
    216          #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
    217          				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    218          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    219          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    220          
    221          #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
    222          #define _DF1S	0
    223          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x59,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
    224          				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    225          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    226          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    227          
    228          #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
    229          #define _DF1S	0
    230          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0x9F, \
    231          				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
    232          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    233          				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
    234          
    235          #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
    236          #define _DF1S	0
    237          #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
    238          				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
    239          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
    240          				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
    241          
    242          #elif _CODE_PAGE == 857	/* Turkish (OEM) */
    243          #define _DF1S	0
    244          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
    245          				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    246          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    247          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    248          
    249          #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
    250          #define _DF1S	0
    251          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x59,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
    252          				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    253          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    254          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    255          
    256          #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
    257          #define _DF1S	0
    258          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    259          				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    260          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    261          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    262          
    263          #elif _CODE_PAGE == 866	/* Russian (OEM) */
    264          #define _DF1S	0
    265          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    266          				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    267          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    268          				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    269          
    270          #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
    271          #define _DF1S	0
    272          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    273          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    274          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    275          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    276          
    277          #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
    278          #define _DF1S	0
    279          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x8D,0x8E,0x8F, \
    280          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xA3,0xB4,0xB5,0xB6,0xB7,0xB8,0xA5,0xAA,0xBB,0xBC,0xBD,0xBC,0xAF, \
    281          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    282          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xFF}
    283          
    284          #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
    285          #define _DF1S	0
    286          #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x80,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x8D,0x8E,0x8F, \
    287          				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB2,0xA5,0xB5,0xB6,0xB7,0xA8,0xB9,0xAA,0xBB,0xA3,0xBD,0xBD,0xAF, \
    288          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    289          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF}
    290          
    291          #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
    292          #define _DF1S	0
    293          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xAd,0x9B,0x8C,0x9D,0xAE,0x9F, \
    294          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    295          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    296          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0x9F}
    297          
    298          #elif _CODE_PAGE == 1253 /* Greek (Windows) */
    299          #define _DF1S	0
    300          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    301          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    302          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xA2,0xB8,0xB9,0xBA, \
    303          				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xFB,0xBC,0xFD,0xBF,0xFF}
    304          
    305          #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
    306          #define _DF1S	0
    307          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x9D,0x9E,0x9F, \
    308          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    309          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    310          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0x9F}
    311          
    312          #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
    313          #define _DF1S	0
    314          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    315          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    316          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    317          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    318          
    319          #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
    320          #define _DF1S	0
    321          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x8C,0x9D,0x9E,0x9F, \
    322          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    323          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    324          				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,0xF3,0x4F,0xF5,0xF6,0xF7,0xF8,0x55,0xFA,0x55,0x55,0xFD,0xFE,0xFF}
    325          
    326          #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
    327          #define _DF1S	0
    328          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    329          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xA8,0xB9,0xAA,0xBB,0xBC,0xBD,0xBE,0xAF, \
    330          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    331          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xFF}
    332          
    333          #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
    334          #define _DF1S	0
    335          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0xAC,0x9D,0x9E,0x9F, \
    336          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    337          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    338          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xFE,0x9F}
    339          
    340          #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
    341          #if _USE_LFN
    342          #error Cannot use LFN feature without valid code page.
    343          #endif
    344          #define _DF1S	0
    345          
    346          #else
    347          #error Unknown code page
    348          
    349          #endif
    350          
    351          
    352          /* Character code support macros */
    353          #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
    354          #define IsLower(c)	(((c)>='a')&&((c)<='z'))
    355          #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
    356          
    357          #if _DF1S		/* Code page is DBCS */
    358          
    359          #ifdef _DF2S	/* Two 1st byte areas */
    360          #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) <= _DF2E))
    361          #else			/* One 1st byte area */
    362          #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
    363          #endif
    364          
    365          #ifdef _DS3S	/* Three 2nd byte areas */
    366          #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) <= _DS2E) || ((BYTE)(c) >= _DS3S && (BYTE)(c) <= _DS3E))
    367          #else			/* Two 2nd byte areas */
    368          #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) <= _DS2E))
    369          #endif
    370          
    371          #else			/* Code page is SBCS */
    372          
    373          #define IsDBCS1(c)	0
    374          #define IsDBCS2(c)	0
    375          
    376          #endif /* _DF1S */
    377          
    378          
    379          /* Name status flags */
    380          #define NS			11		/* Index of name status byte in fn[] */
    381          #define NS_LOSS		0x01	/* Out of 8.3 format */
    382          #define NS_LFN		0x02	/* Force to create LFN entry */
    383          #define NS_LAST		0x04	/* Last segment */
    384          #define NS_BODY		0x08	/* Lower case flag (body) */
    385          #define NS_EXT		0x10	/* Lower case flag (ext) */
    386          #define NS_DOT		0x20	/* Dot entry */
    387          
    388          
    389          /* FAT sub-type boundaries */
    390          /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
    391          #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
    392          #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
    393          
    394          
    395          /* FatFs refers the members in the FAT structures as byte array instead of
    396          / structure member because the structure is not binary compatible between
    397          / different platforms */
    398          
    399          #define BS_jmpBoot			0	/* Jump instruction (3) */
    400          #define BS_OEMName			3	/* OEM name (8) */
    401          #define BPB_BytsPerSec		11	/* Sector size [byte] (2) */
    402          #define BPB_SecPerClus		13	/* Cluster size [sector] (1) */
    403          #define BPB_RsvdSecCnt		14	/* Size of reserved area [sector] (2) */
    404          #define BPB_NumFATs			16	/* Number of FAT copies (1) */
    405          #define BPB_RootEntCnt		17	/* Number of root dir entries for FAT12/16 (2) */
    406          #define BPB_TotSec16		19	/* Volume size [sector] (2) */
    407          #define BPB_Media			21	/* Media descriptor (1) */
    408          #define BPB_FATSz16			22	/* FAT size [sector] (2) */
    409          #define BPB_SecPerTrk		24	/* Track size [sector] (2) */
    410          #define BPB_NumHeads		26	/* Number of heads (2) */
    411          #define BPB_HiddSec			28	/* Number of special hidden sectors (4) */
    412          #define BPB_TotSec32		32	/* Volume size [sector] (4) */
    413          #define BS_DrvNum			36	/* Physical drive number (2) */
    414          #define BS_BootSig			38	/* Extended boot signature (1) */
    415          #define BS_VolID			39	/* Volume serial number (4) */
    416          #define BS_VolLab			43	/* Volume label (8) */
    417          #define BS_FilSysType		54	/* File system type (1) */
    418          #define BPB_FATSz32			36	/* FAT size [sector] (4) */
    419          #define BPB_ExtFlags		40	/* Extended flags (2) */
    420          #define BPB_FSVer			42	/* File system version (2) */
    421          #define BPB_RootClus		44	/* Root dir first cluster (4) */
    422          #define BPB_FSInfo			48	/* Offset of FSInfo sector (2) */
    423          #define BPB_BkBootSec		50	/* Offset of backup boot sectot (2) */
    424          #define BS_DrvNum32			64	/* Physical drive number (2) */
    425          #define BS_BootSig32		66	/* Extended boot signature (1) */
    426          #define BS_VolID32			67	/* Volume serial number (4) */
    427          #define BS_VolLab32			71	/* Volume label (8) */
    428          #define BS_FilSysType32		82	/* File system type (1) */
    429          #define	FSI_LeadSig			0	/* FSI: Leading signature (4) */
    430          #define	FSI_StrucSig		484	/* FSI: Structure signature (4) */
    431          #define	FSI_Free_Count		488	/* FSI: Number of free clusters (4) */
    432          #define	FSI_Nxt_Free		492	/* FSI: Last allocated cluster (4) */
    433          #define MBR_Table			446	/* MBR: Partition table offset (2) */
    434          #define	SZ_PTE				16	/* MBR: Size of a partition table entry */
    435          #define BS_55AA				510	/* Boot sector signature (2) */
    436          
    437          #define	DIR_Name			0	/* Short file name (11) */
    438          #define	DIR_Attr			11	/* Attribute (1) */
    439          #define	DIR_NTres			12	/* NT flag (1) */
    440          #define	DIR_CrtTime			14	/* Created time (2) */
    441          #define	DIR_CrtDate			16	/* Created date (2) */
    442          #define	DIR_FstClusHI		20	/* Higher 16-bit of first cluster (2) */
    443          #define	DIR_WrtTime			22	/* Modified time (2) */
    444          #define	DIR_WrtDate			24	/* Modified date (2) */
    445          #define	DIR_FstClusLO		26	/* Lower 16-bit of first cluster (2) */
    446          #define	DIR_FileSize		28	/* File size (4) */
    447          #define	LDIR_Ord			0	/* LFN entry order and LLE flag (1) */
    448          #define	LDIR_Attr			11	/* LFN attribute (1) */
    449          #define	LDIR_Type			12	/* LFN type (1) */
    450          #define	LDIR_Chksum			13	/* Sum of corresponding SFN entry */
    451          #define	LDIR_FstClusLO		26	/* Filled by zero (0) */
    452          #define	SZ_DIR				32		/* Size of a directory entry */
    453          #define	LLE					0x40	/* Last long entry flag in LDIR_Ord */
    454          #define	DDE					0xE5	/* Deleted directory enrty mark in DIR_Name[0] */
    455          #define	NDDE				0x05	/* Replacement of a character collides with DDE */
    456          
    457          
    458          /*------------------------------------------------------------*/
    459          /* Module private work area                                   */
    460          /*------------------------------------------------------------*/
    461          /* Note that uninitialized variables with static duration are
    462          /  zeroed/nulled at start-up. If not, the compiler or start-up
    463          /  routine is out of ANSI-C standard.
    464          */
    465          
    466          #if _VOLUMES
    467          static
    468          FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
    469          #else
    470          #error Number of volumes must not be 0.
    471          #endif
    472          
    473          static
    474          WORD Fsid;				/* File system mount ID */
    475          
    476          #if _FS_RPATH
    477          static
    478          BYTE CurrVol;			/* Current drive */
    479          #endif
    480          
    481          #if _FS_SHARE
    482          static
    483          FILESEM	Files[_FS_SHARE];	/* File lock semaphores */
    484          #endif
    485          
    486          #if _USE_LFN == 0			/* No LFN feature */
    487          #define	DEF_NAMEBUF			BYTE sfn[12]
    488          #define INIT_BUF(dobj)		(dobj).fn = sfn
    489          #define	FREE_BUF()
    490          
    491          #elif _USE_LFN == 1			/* LFN feature with static working buffer */
    492          static WCHAR LfnBuf[_MAX_LFN+1];
    493          #define	DEF_NAMEBUF			BYTE sfn[12]
    494          #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
    495          #define	FREE_BUF()
    496          
    497          #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
    498          #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
    499          #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
    500          #define	FREE_BUF()
    501          
    502          #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
    503          #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
    504          #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
    505          							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
    506          							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
    507          #define	FREE_BUF()			ff_memfree(lfn)
    508          
    509          #else
    510          #error Wrong LFN configuration.
    511          #endif
    512          
    513          
    514          
    515          
    516          /*--------------------------------------------------------------------------
    517          
    518             Module Private Functions
    519          
    520          ---------------------------------------------------------------------------*/
    521          
    522          
    523          /*-----------------------------------------------------------------------*/
    524          /* String functions                                                      */
    525          /*-----------------------------------------------------------------------*/
    526          
    527          /* Copy memory to memory */
    528          static
    529          void mem_cpy (void* dst, const void* src, UINT cnt) {
    530          	BYTE *d = (BYTE*)dst;
    531          	const BYTE *s = (const BYTE*)src;
    532          
    533          #if _WORD_ACCESS == 1
    534          	while (cnt >= sizeof(int)) {
    535          		*(int*)d = *(int*)s;
    536          		d += sizeof(int); s += sizeof(int);
    537          		cnt -= sizeof(int);
    538          	}
    539          #endif
    540          	while (cnt--)
    541          		*d++ = *s++;
    542          }
    543          
    544          /* Fill memory */
    545          static
    546          void mem_set (void* dst, int val, UINT cnt) {
    547          	BYTE *d = (BYTE*)dst;
    548          
    549          	while (cnt--)
    550          		*d++ = (BYTE)val;
    551          }
    552          
    553          /* Compare memory to memory */
    554          static
    555          int mem_cmp (const void* dst, const void* src, UINT cnt) {
    556          	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    557          	int r = 0;
    558          
    559          	while (cnt-- && (r = *d++ - *s++) == 0) ;
    560          	return r;
    561          }
    562          
    563          /* Check if chr is contained in the string */
    564          static
    565          int chk_chr (const char* str, int chr) {
    566          	while (*str && *str != chr) str++;
    567          	return *str;
    568          }
    569          
    570          
    571          
    572          /*-----------------------------------------------------------------------*/
    573          /* Request/Release grant to access the volume                            */
    574          /*-----------------------------------------------------------------------*/
    575          #if _FS_REENTRANT
    576          
    577          static
    578          int lock_fs (
    579          	FATFS *fs		/* File system object */
    580          )
    581          {
    582          	return ff_req_grant(fs->sobj);
    583          }
    584          
    585          
    586          static
    587          void unlock_fs (
    588          	FATFS *fs,		/* File system object */
    589          	FRESULT res		/* Result code to be returned */
    590          )
    591          {
    592          	if (res != FR_NOT_ENABLED &&
    593          		res != FR_INVALID_DRIVE &&
    594          		res != FR_INVALID_OBJECT &&
    595          		res != FR_TIMEOUT) {
    596          		ff_rel_grant(fs->sobj);
    597          	}
    598          }
    599          #endif
    600          
    601          
    602          
    603          /*-----------------------------------------------------------------------*/
    604          /* File shareing control functions                                       */
    605          /*-----------------------------------------------------------------------*/
    606          #if _FS_SHARE
    607          
    608          static
    609          FRESULT chk_lock (	/* Check if the file can be accessed */
    610          	DIR* dj,		/* Directory object pointing the file to be checked */
    611          	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
    612          )
    613          {
    614          	UINT i, be;
    615          
    616          	/* Search file semaphore table */
    617          	for (i = be = 0; i < _FS_SHARE; i++) {
    618          		if (Files[i].fs) {	/* Existing entry */
    619          			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
    620          				Files[i].clu == dj->sclust &&
    621          				Files[i].idx == dj->index) break;
    622          		} else {			/* Blank entry */
    623          			be++;
    624          		}
    625          	}
    626          	if (i == _FS_SHARE)	/* The file is not opened */
    627          		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */
    628          
    629          	/* The file has been opened. Reject any open against writing file and all write mode open */
    630          	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
    631          }
    632          
    633          
    634          static
    635          int enq_lock (void)	/* Check if an entry is available for a new file */
    636          {
    637          	UINT i;
    638          
    639          	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
    640          	return (i == _FS_SHARE) ? 0 : 1;
    641          }
    642          
    643          
    644          static
    645          UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
    646          	DIR* dj,	/* Directory object pointing the file to register or increment */
    647          	int acc		/* Desired access mode (0:Read, !0:Write) */
    648          )
    649          {
    650          	UINT i;
    651          
    652          
    653          	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
    654          		if (Files[i].fs == dj->fs &&
    655          			Files[i].clu == dj->sclust &&
    656          			Files[i].idx == dj->index) break;
    657          	}
    658          
    659          	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
    660          		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
    661          		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
    662          		Files[i].fs = dj->fs;
    663          		Files[i].clu = dj->sclust;
    664          		Files[i].idx = dj->index;
    665          		Files[i].ctr = 0;
    666          	}
    667          
    668          	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
    669          
    670          	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
    671          
    672          	return i + 1;
    673          }
    674          
    675          
    676          static
    677          FRESULT dec_lock (	/* Decrement file open counter */
    678          	UINT i			/* Semaphore index */
    679          )
    680          {
    681          	WORD n;
    682          	FRESULT res;
    683          
    684          
    685          	if (--i < _FS_SHARE) {
    686          		n = Files[i].ctr;
    687          		if (n == 0x100) n = 0;
    688          		if (n) n--;
    689          		Files[i].ctr = n;
    690          		if (!n) Files[i].fs = 0;
    691          		res = FR_OK;
    692          	} else {
    693          		res = FR_INT_ERR;
    694          	}
    695          	return res;
    696          }
    697          
    698          
    699          static
    700          void clear_lock (	/* Clear lock entries of the volume */
    701          	FATFS *fs
    702          )
    703          {
    704          	UINT i;
    705          
    706          	for (i = 0; i < _FS_SHARE; i++) {
    707          		if (Files[i].fs == fs) Files[i].fs = 0;
    708          	}
    709          }
    710          #endif
    711          
    712          
    713          
    714          /*-----------------------------------------------------------------------*/
    715          /* Change window offset                                                  */
    716          /*-----------------------------------------------------------------------*/
    717          
    718          static
    719          FRESULT move_window (
    720          	FATFS *fs,		/* File system object */
    721          	DWORD sector	/* Sector number to make appearance in the fs->win[] */
    722          )					/* Move to zero only writes back dirty window */
    723          {
    724          	DWORD wsect;
    725          
    726          
    727          	wsect = fs->winsect;
    728          	if (wsect != sector) {	/* Changed current window */
    729          #if !_FS_READONLY
    730          		if (fs->wflag) {	/* Write back dirty window if needed */
    731          			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    732          				return FR_DISK_ERR;
    733          			fs->wflag = 0;
    734          			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    735          				BYTE nf;
    736          				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    737          					wsect += fs->fsize;
    738          					disk_write(fs->drv, fs->win, wsect, 1);
    739          				}
    740          			}
    741          		}
    742          #endif
    743          		if (sector) {
    744          			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    745          				return FR_DISK_ERR;
    746          			fs->winsect = sector;
    747          		}
    748          	}
    749          
    750          	return FR_OK;
    751          }
    752          
    753          
    754          
    755          
    756          /*-----------------------------------------------------------------------*/
    757          /* Clean-up cached data                                                  */
    758          /*-----------------------------------------------------------------------*/
    759          #if !_FS_READONLY
    760          static
    761          FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
    762          	FATFS *fs	/* File system object */
    763          )
    764          {
    765          	FRESULT res;
    766          
    767          
    768          	res = move_window(fs, 0);
    769          	if (res == FR_OK) {
    770          		/* Update FSInfo sector if needed */
    771          		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    772          			fs->winsect = 0;
    773          			/* Create FSInfo structure */
    774          			mem_set(fs->win, 0, 512);
    775          			ST_WORD(fs->win+BS_55AA, 0xAA55);
    776          			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    777          			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    778          			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    779          			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    780          			/* Write it into the FSInfo sector */
    781          			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    782          			fs->fsi_flag = 0;
    783          		}
    784          		/* Make sure that no pending write process in the physical drive */
    785          		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    786          			res = FR_DISK_ERR;
    787          	}
    788          
    789          	return res;
    790          }
    791          #endif
    792          
    793          
    794          
    795          
    796          /*-----------------------------------------------------------------------*/
    797          /* Get sector# from cluster#                                             */
    798          /*-----------------------------------------------------------------------*/
    799          
    800          
    801          DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
    802          	FATFS *fs,		/* File system object */
    803          	DWORD clst		/* Cluster# to be converted */
    804          )
    805          {
    806          	clst -= 2;
    807          	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    808          	return clst * fs->csize + fs->database;
    809          }
    810          
    811          
    812          
    813          
    814          /*-----------------------------------------------------------------------*/
    815          /* FAT access - Read value of a FAT entry                                */
    816          /*-----------------------------------------------------------------------*/
    817          
    818          
    819          DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    820          	FATFS *fs,	/* File system object */
    821          	DWORD clst	/* Cluster# to get the link information */
    822          )
    823          {
    824          	UINT wc, bc;
    825          	BYTE *p;
    826          
    827          
    828          	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    829          		return 1;
    830          
    831          	switch (fs->fs_type) {
    832          	case FS_FAT12 :
    833          		bc = (UINT)clst; bc += bc / 2;
    834          		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    835          		wc = fs->win[bc % SS(fs)]; bc++;
    836          		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    837          		wc |= fs->win[bc % SS(fs)] << 8;
    838          		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    839          
    840          	case FS_FAT16 :
    841          		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    842          		p = &fs->win[clst * 2 % SS(fs)];
    843          		return LD_WORD(p);
    844          
    845          	case FS_FAT32 :
    846          		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    847          		p = &fs->win[clst * 4 % SS(fs)];
    848          		return LD_DWORD(p) & 0x0FFFFFFF;
    849          	}
    850          
    851          	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    852          }
    853          
    854          
    855          
    856          
    857          /*-----------------------------------------------------------------------*/
    858          /* FAT access - Change value of a FAT entry                              */
    859          /*-----------------------------------------------------------------------*/
    860          #if !_FS_READONLY
    861          
    862          FRESULT put_fat (
    863          	FATFS *fs,	/* File system object */
    864          	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
    865          	DWORD val	/* New value to mark the cluster */
    866          )
    867          {
    868          	UINT bc;
    869          	BYTE *p;
    870          	FRESULT res;
    871          
    872          
    873          	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    874          		res = FR_INT_ERR;
    875          
    876          	} else {
    877          		switch (fs->fs_type) {
    878          		case FS_FAT12 :
    879          			bc = clst; bc += bc / 2;
    880          			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    881          			if (res != FR_OK) break;
    882          			p = &fs->win[bc % SS(fs)];
    883          			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    884          			bc++;
    885          			fs->wflag = 1;
    886          			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    887          			if (res != FR_OK) break;
    888          			p = &fs->win[bc % SS(fs)];
    889          			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    890          			break;
    891          
    892          		case FS_FAT16 :
    893          			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    894          			if (res != FR_OK) break;
    895          			p = &fs->win[clst * 2 % SS(fs)];
    896          			ST_WORD(p, (WORD)val);
    897          			break;
    898          
    899          		case FS_FAT32 :
    900          			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    901          			if (res != FR_OK) break;
    902          			p = &fs->win[clst * 4 % SS(fs)];
    903          			val |= LD_DWORD(p) & 0xF0000000;
    904          			ST_DWORD(p, val);
    905          			break;
    906          
    907          		default :
    908          			res = FR_INT_ERR;
    909          		}
    910          		fs->wflag = 1;
    911          	}
    912          
    913          	return res;
    914          }
    915          #endif /* !_FS_READONLY */
    916          
    917          
    918          
    919          
    920          /*-----------------------------------------------------------------------*/
    921          /* FAT handling - Remove a cluster chain                                 */
    922          /*-----------------------------------------------------------------------*/
    923          #if !_FS_READONLY
    924          static
    925          FRESULT remove_chain (
    926          	FATFS *fs,			/* File system object */
    927          	DWORD clst			/* Cluster# to remove a chain from */
    928          )
    929          {
    930          	FRESULT res;
    931          	DWORD nxt;
    932          #if _USE_ERASE
    933          	DWORD scl = clst, ecl = clst, resion[2];
    934          #endif
    935          
    936          	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    937          		res = FR_INT_ERR;
    938          
    939          	} else {
    940          		res = FR_OK;
    941          		while (clst < fs->n_fatent) {			/* Not a last link? */
    942          			nxt = get_fat(fs, clst);			/* Get cluster status */
    943          			if (nxt == 0) break;				/* Empty cluster? */
    944          			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    945          			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    946          			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    947          			if (res != FR_OK) break;
    948          			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    949          				fs->free_clust++;
    950          				fs->fsi_flag = 1;
    951          			}
    952          #if _USE_ERASE
    953          			if (ecl + 1 == nxt) {	/* Next cluster is contiguous */
    954          				ecl = nxt;
    955          			} else {				/* End of contiguous clusters */ 
    956          				resion[0] = clust2sect(fs, scl);					/* Start sector */
    957          				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
    958          				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
    959          				scl = ecl = nxt;
    960          			}
    961          #endif
    962          			clst = nxt;	/* Next cluster */
    963          		}
    964          	}
    965          
    966          	return res;
    967          }
    968          #endif
    969          
    970          
    971          
    972          
    973          /*-----------------------------------------------------------------------*/
    974          /* FAT handling - Stretch or Create a cluster chain                      */
    975          /*-----------------------------------------------------------------------*/
    976          #if !_FS_READONLY
    977          static
    978          DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
    979          	FATFS *fs,			/* File system object */
    980          	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
    981          )
    982          {
    983          	DWORD cs, ncl, scl;
    984          	FRESULT res;
    985          
    986          
    987          	if (clst == 0) {		/* Create a new chain */
    988          		scl = fs->last_clust;			/* Get suggested start point */
    989          		if (!scl || scl >= fs->n_fatent) scl = 1;
    990          	}
    991          	else {					/* Stretch the current chain */
    992          		cs = get_fat(fs, clst);			/* Check the cluster status */
    993          		if (cs < 2) return 1;			/* It is an invalid cluster */
    994          		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    995          		scl = clst;
    996          	}
    997          
    998          	ncl = scl;				/* Start cluster */
    999          	for (;;) {
   1000          		ncl++;							/* Next cluster */
   1001          		if (ncl >= fs->n_fatent) {		/* Wrap around */
   1002          			ncl = 2;
   1003          			if (ncl > scl) return 0;	/* No free cluster */
   1004          		}
   1005          		cs = get_fat(fs, ncl);			/* Get the cluster status */
   1006          		if (cs == 0) break;				/* Found a free cluster */
   1007          		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   1008          			return cs;
   1009          		if (ncl == scl) return 0;		/* No free cluster */
   1010          	}
   1011          
   1012          	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   1013          	if (res == FR_OK && clst != 0) {
   1014          		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   1015          	}
   1016          	if (res == FR_OK) {
   1017          		fs->last_clust = ncl;			/* Update FSINFO */
   1018          		if (fs->free_clust != 0xFFFFFFFF) {
   1019          			fs->free_clust--;
   1020          			fs->fsi_flag = 1;
   1021          		}
   1022          	} else {
   1023          		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   1024          	}
   1025          
   1026          	return ncl;		/* Return new cluster number or error code */
   1027          }
   1028          #endif /* !_FS_READONLY */
   1029          
   1030          
   1031          
   1032          /*-----------------------------------------------------------------------*/
   1033          /* FAT handling - Convert offset into cluster with link map table        */
   1034          /*-----------------------------------------------------------------------*/
   1035          
   1036          #if _USE_FASTSEEK
   1037          static
   1038          DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
   1039          	FIL* fp,		/* Pointer to the file object */
   1040          	DWORD ofs		/* File offset to be converted to cluster# */
   1041          )
   1042          {
   1043          	DWORD cl, ncl, *tbl;
   1044          
   1045          
   1046          	tbl = fp->cltbl + 1;	/* Top of CLMT */
   1047          	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
   1048          	for (;;) {
   1049          		ncl = *tbl++;			/* Number of cluters in the fragment */
   1050          		if (!ncl) return 0;		/* End of table? (error) */
   1051          		if (cl < ncl) break;	/* In this fragment? */
   1052          		cl -= ncl; tbl++;		/* Next fragment */
   1053          	}
   1054          	return cl + *tbl;	/* Return the cluster number */
   1055          }
   1056          #endif	/* _USE_FASTSEEK */
   1057          
   1058          
   1059          
   1060          /*-----------------------------------------------------------------------*/
   1061          /* Directory handling - Set directory index                              */
   1062          /*-----------------------------------------------------------------------*/
   1063          
   1064          static
   1065          FRESULT dir_sdi (
   1066          	DIR *dj,		/* Pointer to directory object */
   1067          	WORD idx		/* Directory index number */
   1068          )
   1069          {
   1070          	DWORD clst;
   1071          	WORD ic;
   1072          
   1073          
   1074          	dj->index = idx;
   1075          	clst = dj->sclust;
   1076          	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   1077          		return FR_INT_ERR;
   1078          	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   1079          		clst = dj->fs->dirbase;
   1080          
   1081          	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   1082          		dj->clust = clst;
   1083          		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   1084          			return FR_INT_ERR;
   1085          		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   1086          	}
   1087          	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
   1088          		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   1089          		while (idx >= ic) {	/* Follow cluster chain */
   1090          			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   1091          			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1092          			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   1093          				return FR_INT_ERR;
   1094          			idx -= ic;
   1095          		}
   1096          		dj->clust = clst;
   1097          		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   1098          	}
   1099          
   1100          	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   1101          
   1102          	return FR_OK;	/* Seek succeeded */
   1103          }
   1104          
   1105          
   1106          
   1107          
   1108          /*-----------------------------------------------------------------------*/
   1109          /* Directory handling - Move directory index next                        */
   1110          /*-----------------------------------------------------------------------*/
   1111          
   1112          static
   1113          FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
   1114          	DIR *dj,		/* Pointer to directory object */
   1115          	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
   1116          )
   1117          {
   1118          	DWORD clst;
   1119          	WORD i;
   1120          
   1121          
   1122          	stretch = stretch;		/* To suppress warning on read-only cfg. */
   1123          	i = dj->index + 1;
   1124          	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   1125          		return FR_NO_FILE;
   1126          
   1127          	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   1128          		dj->sect++;					/* Next sector */
   1129          
   1130          		if (dj->clust == 0) {	/* Static table */
   1131          			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   1132          				return FR_NO_FILE;
   1133          		}
   1134          		else {					/* Dynamic table */
   1135          			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   1136          				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   1137          				if (clst <= 1) return FR_INT_ERR;
   1138          				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1139          				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   1140          #if !_FS_READONLY
   1141          					BYTE c;
   1142          					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   1143          					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   1144          					if (clst == 0) return FR_DENIED;			/* No free cluster */
   1145          					if (clst == 1) return FR_INT_ERR;
   1146          					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1147          					/* Clean-up stretched table */
   1148          					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   1149          					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   1150          					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   1151          					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1152          						dj->fs->wflag = 1;
   1153          						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   1154          						dj->fs->winsect++;
   1155          					}
   1156          					dj->fs->winsect -= c;						/* Rewind window address */
   1157          #else
   1158          					return FR_NO_FILE;			/* Report EOT */
   1159          #endif
   1160          				}
   1161          				dj->clust = clst;				/* Initialize data for new cluster */
   1162          				dj->sect = clust2sect(dj->fs, clst);
   1163          			}
   1164          		}
   1165          	}
   1166          
   1167          	dj->index = i;
   1168          	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   1169          
   1170          	return FR_OK;
   1171          }
   1172          
   1173          
   1174          
   1175          
   1176          /*-----------------------------------------------------------------------*/
   1177          /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
   1178          /*-----------------------------------------------------------------------*/
   1179          #if _USE_LFN
   1180          static
   1181          const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory entry */
   1182          
   1183          
   1184          static
   1185          int cmp_lfn (			/* 1:Matched, 0:Not matched */
   1186          	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
   1187          	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
   1188          )
   1189          {
   1190          	UINT i, s;
   1191          	WCHAR wc, uc;
   1192          
   1193          
   1194          	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   1195          	s = 0; wc = 1;
   1196          	do {
   1197          		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   1198          		if (wc) {	/* Last char has not been processed */
   1199          			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   1200          			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   1201          				return 0;				/* Not matched */
   1202          		} else {
   1203          			if (uc != 0xFFFF) return 0;	/* Check filler */
   1204          		}
   1205          	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   1206          
   1207          	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   1208          		return 0;
   1209          
   1210          	return 1;						/* The part of LFN matched */
   1211          }
   1212          
   1213          
   1214          
   1215          static
   1216          int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
   1217          	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
   1218          	BYTE *dir			/* Pointer to the directory entry */
   1219          )
   1220          {
   1221          	UINT i, s;
   1222          	WCHAR wc, uc;
   1223          
   1224          
   1225          	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   1226          
   1227          	s = 0; wc = 1;
   1228          	do {
   1229          		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   1230          		if (wc) {	/* Last char has not been processed */
   1231          			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   1232          			lfnbuf[i++] = wc = uc;			/* Store it */
   1233          		} else {
   1234          			if (uc != 0xFFFF) return 0;		/* Check filler */
   1235          		}
   1236          	} while (++s < 13);						/* Read all character in the entry */
   1237          
   1238          	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
   1239          		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   1240          		lfnbuf[i] = 0;
   1241          	}
   1242          
   1243          	return 1;
   1244          }
   1245          
   1246          
   1247          #if !_FS_READONLY
   1248          static
   1249          void fit_lfn (
   1250          	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
   1251          	BYTE *dir,				/* Pointer to the directory entry */
   1252          	BYTE ord,				/* LFN order (1-20) */
   1253          	BYTE sum				/* SFN sum */
   1254          )
   1255          {
   1256          	UINT i, s;
   1257          	WCHAR wc;
   1258          
   1259          
   1260          	dir[LDIR_Chksum] = sum;			/* Set check sum */
   1261          	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   1262          	dir[LDIR_Type] = 0;
   1263          	ST_WORD(dir+LDIR_FstClusLO, 0);
   1264          
   1265          	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   1266          	s = wc = 0;
   1267          	do {
   1268          		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1269          		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1270          		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   1271          	} while (++s < 13);
   1272          	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   1273          	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   1274          }
   1275          
   1276          #endif
   1277          #endif
   1278          
   1279          
   1280          
   1281          /*-----------------------------------------------------------------------*/
   1282          /* Create numbered name                                                  */
   1283          /*-----------------------------------------------------------------------*/
   1284          #if _USE_LFN
   1285          void gen_numname (
   1286          	BYTE *dst,			/* Pointer to generated SFN */
   1287          	const BYTE *src,	/* Pointer to source SFN to be modified */
   1288          	const WCHAR *lfn,	/* Pointer to LFN */
   1289          	WORD seq			/* Sequence number */
   1290          )
   1291          {
   1292          	BYTE ns[8], c;
   1293          	UINT i, j;
   1294          
   1295          
   1296          	mem_cpy(dst, src, 11);
   1297          
   1298          	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   1299          		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   1300          	}
   1301          
   1302          	/* itoa (hexdecimal) */
   1303          	i = 7;
   1304          	do {
   1305          		c = (seq % 16) + '0';
   1306          		if (c > '9') c += 7;
   1307          		ns[i--] = c;
   1308          		seq /= 16;
   1309          	} while (seq);
   1310          	ns[i] = '~';
   1311          
   1312          	/* Append the number */
   1313          	for (j = 0; j < i && dst[j] != ' '; j++) {
   1314          		if (IsDBCS1(dst[j])) {
   1315          			if (j == i - 1) break;
   1316          			j++;
   1317          		}
   1318          	}
   1319          	do {
   1320          		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1321          	} while (j < 8);
   1322          }
   1323          #endif
   1324          
   1325          
   1326          
   1327          
   1328          /*-----------------------------------------------------------------------*/
   1329          /* Calculate sum of an SFN                                               */
   1330          /*-----------------------------------------------------------------------*/
   1331          #if _USE_LFN
   1332          static
   1333          BYTE sum_sfn (
   1334          	const BYTE *dir		/* Ptr to directory entry */
   1335          )
   1336          {
   1337          	BYTE sum = 0;
   1338          	UINT n = 11;
   1339          
   1340          	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1341          	return sum;
   1342          }
   1343          #endif
   1344          
   1345          
   1346          
   1347          
   1348          /*-----------------------------------------------------------------------*/
   1349          /* Directory handling - Find an object in the directory                  */
   1350          /*-----------------------------------------------------------------------*/
   1351          
   1352          static
   1353          FRESULT dir_find (
   1354          	DIR *dj			/* Pointer to the directory object linked to the file name */
   1355          )
   1356          {
   1357          	FRESULT res;
   1358          	BYTE c, *dir;
   1359          #if _USE_LFN
   1360          	BYTE a, ord, sum;
   1361          #endif
   1362          
   1363          	res = dir_sdi(dj, 0);			/* Rewind directory object */
   1364          	if (res != FR_OK) return res;
   1365          
   1366          #if _USE_LFN
   1367          	ord = sum = 0xFF;
   1368          #endif
   1369          	do {
   1370          		res = move_window(dj->fs, dj->sect);
   1371          		if (res != FR_OK) break;
   1372          		dir = dj->dir;					/* Ptr to the directory entry of current index */
   1373          		c = dir[DIR_Name];
   1374          		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1375          #if _USE_LFN	/* LFN configuration */
   1376          		a = dir[DIR_Attr] & AM_MASK;
   1377          		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   1378          			ord = 0xFF;
   1379          		} else {
   1380          			if (a == AM_LFN) {			/* An LFN entry is found */
   1381          				if (dj->lfn) {
   1382          					if (c & LLE) {		/* Is it start of LFN sequence? */
   1383          						sum = dir[LDIR_Chksum];
   1384          						c &= ~LLE; ord = c;	/* LFN start order */
   1385          						dj->lfn_idx = dj->index;
   1386          					}
   1387          					/* Check validity of the LFN entry and compare it with given name */
   1388          					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1389          				}
   1390          			} else {					/* An SFN entry is found */
   1391          				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1392          				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1393          				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   1394          			}
   1395          		}
   1396          #else		/* Non LFN configuration */
   1397          		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   1398          			break;
   1399          #endif
   1400          		res = dir_next(dj, 0);		/* Next entry */
   1401          	} while (res == FR_OK);
   1402          
   1403          	return res;
   1404          }
   1405          
   1406          
   1407          
   1408          
   1409          /*-----------------------------------------------------------------------*/
   1410          /* Read an object from the directory                                     */
   1411          /*-----------------------------------------------------------------------*/
   1412          #if _FS_MINIMIZE <= 1
   1413          static
   1414          FRESULT dir_read (
   1415          	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
   1416          )
   1417          {
   1418          	FRESULT res;
   1419          	BYTE c, *dir;
   1420          #if _USE_LFN
   1421          	BYTE a, ord = 0xFF, sum = 0xFF;
   1422          #endif
   1423          
   1424          	res = FR_NO_FILE;
   1425          	while (dj->sect) {
   1426          		res = move_window(dj->fs, dj->sect);
   1427          		if (res != FR_OK) break;
   1428          		dir = dj->dir;					/* Ptr to the directory entry of current index */
   1429          		c = dir[DIR_Name];
   1430          		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1431          #if _USE_LFN	/* LFN configuration */
   1432          		a = dir[DIR_Attr] & AM_MASK;
   1433          		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   1434          			ord = 0xFF;
   1435          		} else {
   1436          			if (a == AM_LFN) {			/* An LFN entry is found */
   1437          				if (c & LLE) {			/* Is it start of LFN sequence? */
   1438          					sum = dir[LDIR_Chksum];
   1439          					c &= ~LLE; ord = c;
   1440          					dj->lfn_idx = dj->index;
   1441          				}
   1442          				/* Check LFN validity and capture it */
   1443          				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1444          			} else {					/* An SFN entry is found */
   1445          				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   1446          					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
   1447          				break;
   1448          			}
   1449          		}
   1450          #else		/* Non LFN configuration */
   1451          		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
   1452          			break;
   1453          #endif
   1454          		res = dir_next(dj, 0);				/* Next entry */
   1455          		if (res != FR_OK) break;
   1456          	}
   1457          
   1458          	if (res != FR_OK) dj->sect = 0;
   1459          
   1460          	return res;
   1461          }
   1462          #endif
   1463          
   1464          
   1465          
   1466          /*-----------------------------------------------------------------------*/
   1467          /* Register an object to the directory                                   */
   1468          /*-----------------------------------------------------------------------*/
   1469          #if !_FS_READONLY
   1470          static
   1471          FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
   1472          	DIR *dj				/* Target directory with object name to be created */
   1473          )
   1474          {
   1475          	FRESULT res;
   1476          	BYTE c, *dir;
   1477          #if _USE_LFN	/* LFN configuration */
   1478          	WORD n, ne, is;
   1479          	BYTE sn[12], *fn, sum;
   1480          	WCHAR *lfn;
   1481          
   1482          
   1483          	fn = dj->fn; lfn = dj->lfn;
   1484          	mem_cpy(sn, fn, 12);
   1485          
   1486          	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
   1487          		return FR_INVALID_NAME;
   1488          
   1489          	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   1490          		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   1491          		for (n = 1; n < 100; n++) {
   1492          			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   1493          			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   1494          			if (res != FR_OK) break;
   1495          		}
   1496          		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   1497          		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   1498          		fn[NS] = sn[NS]; dj->lfn = lfn;
   1499          	}
   1500          
   1501          	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   1502          		for (ne = 0; lfn[ne]; ne++) ;
   1503          		ne = (ne + 25) / 13;
   1504          	} else {						/* Otherwise reserve only an SFN entry. */
   1505          		ne = 1;
   1506          	}
   1507          
   1508          	/* Reserve contiguous entries */
   1509          	res = dir_sdi(dj, 0);
   1510          	if (res != FR_OK) return res;
   1511          	n = is = 0;
   1512          	do {
   1513          		res = move_window(dj->fs, dj->sect);
   1514          		if (res != FR_OK) break;
   1515          		c = *dj->dir;				/* Check the entry status */
   1516          		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   1517          			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   1518          			if (++n == ne) break;	/* A contiguous entry that required count is found */
   1519          		} else {
   1520          			n = 0;					/* Not a blank entry. Restart to search */
   1521          		}
   1522          		res = dir_next(dj, 1);		/* Next entry with table stretch */
   1523          	} while (res == FR_OK);
   1524          
   1525          	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   1526          		res = dir_sdi(dj, is);
   1527          		if (res == FR_OK) {
   1528          			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   1529          			ne--;
   1530          			do {					/* Store LFN entries in bottom first */
   1531          				res = move_window(dj->fs, dj->sect);
   1532          				if (res != FR_OK) break;
   1533          				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   1534          				dj->fs->wflag = 1;
   1535          				res = dir_next(dj, 0);	/* Next entry */
   1536          			} while (res == FR_OK && --ne);
   1537          		}
   1538          	}
   1539          
   1540          #else	/* Non LFN configuration */
   1541          	res = dir_sdi(dj, 0);
   1542          	if (res == FR_OK) {
   1543          		do {	/* Find a blank entry for the SFN */
   1544          			res = move_window(dj->fs, dj->sect);
   1545          			if (res != FR_OK) break;
   1546          			c = *dj->dir;
   1547          			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
   1548          			res = dir_next(dj, 1);			/* Next entry with table stretch */
   1549          		} while (res == FR_OK);
   1550          	}
   1551          #endif
   1552          
   1553          	if (res == FR_OK) {		/* Initialize the SFN entry */
   1554          		res = move_window(dj->fs, dj->sect);
   1555          		if (res == FR_OK) {
   1556          			dir = dj->dir;
   1557          			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   1558          			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   1559          #if _USE_LFN
   1560          			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   1561          #endif
   1562          			dj->fs->wflag = 1;
   1563          		}
   1564          	}
   1565          
   1566          	return res;
   1567          }
   1568          #endif /* !_FS_READONLY */
   1569          
   1570          
   1571          
   1572          
   1573          /*-----------------------------------------------------------------------*/
   1574          /* Remove an object from the directory                                   */
   1575          /*-----------------------------------------------------------------------*/
   1576          #if !_FS_READONLY && !_FS_MINIMIZE
   1577          static
   1578          FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
   1579          	DIR *dj				/* Directory object pointing the entry to be removed */
   1580          )
   1581          {
   1582          	FRESULT res;
   1583          #if _USE_LFN	/* LFN configuration */
   1584          	WORD i;
   1585          
   1586          	i = dj->index;	/* SFN index */
   1587          	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   1588          	if (res == FR_OK) {
   1589          		do {
   1590          			res = move_window(dj->fs, dj->sect);
   1591          			if (res != FR_OK) break;
   1592          			*dj->dir = DDE;			/* Mark the entry "deleted" */
   1593          			dj->fs->wflag = 1;
   1594          			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
   1595          			res = dir_next(dj, 0);		/* Next entry */
   1596          		} while (res == FR_OK);
   1597          		if (res == FR_NO_FILE) res = FR_INT_ERR;
   1598          	}
   1599          
   1600          #else			/* Non LFN configuration */
   1601          	res = dir_sdi(dj, dj->index);
   1602          	if (res == FR_OK) {
   1603          		res = move_window(dj->fs, dj->sect);
   1604          		if (res == FR_OK) {
   1605          			*dj->dir = DDE;			/* Mark the entry "deleted" */
   1606          			dj->fs->wflag = 1;
   1607          		}
   1608          	}
   1609          #endif
   1610          
   1611          	return res;
   1612          }
   1613          #endif /* !_FS_READONLY */
   1614          
   1615          
   1616          
   1617          
   1618          /*-----------------------------------------------------------------------*/
   1619          /* Pick a segment and create the object name in directory form           */
   1620          /*-----------------------------------------------------------------------*/
   1621          
   1622          static
   1623          FRESULT create_name (
   1624          	DIR *dj,			/* Pointer to the directory object */
   1625          	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
   1626          )
   1627          {
   1628          #ifdef _EXCVT
   1629          	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
   1630          #endif
   1631          
   1632          #if _USE_LFN	/* LFN configuration */
   1633          	BYTE b, cf;
   1634          	WCHAR w, *lfn;
   1635          	UINT i, ni, si, di;
   1636          	const TCHAR *p;
   1637          
   1638          	/* Create LFN in Unicode */
   1639          	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1640          	lfn = dj->lfn;
   1641          	si = di = 0;
   1642          	for (;;) {
   1643          		w = p[si++];					/* Get a character */
   1644          		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1645          		if (di >= _MAX_LFN)				/* Reject too long name */
   1646          			return FR_INVALID_NAME;
   1647          #if !_LFN_UNICODE
   1648          		w &= 0xFF;
   1649          		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
   1650          			b = (BYTE)p[si++];			/* Get 2nd byte */
   1651          			if (!IsDBCS2(b))
   1652          				return FR_INVALID_NAME;	/* Reject invalid sequence */
   1653                                  else
   1654          			    w = (w << 8) + b;			/* Create a DBC */
   1655          		}
   1656          		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   1657          		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1658          #endif
   1659          		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   1660          			return FR_INVALID_NAME;
   1661          		lfn[di++] = w;					/* Store the Unicode char */
   1662          	}
   1663          	*path = &p[si];						/* Return pointer to the next segment */
   1664          	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1665          #if _FS_RPATH
   1666          	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
   1667          		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
   1668          		lfn[di] = 0;
   1669          		for (i = 0; i < 11; i++)
   1670          			dj->fn[i] = (i < di) ? '.' : ' ';
   1671          		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
   1672          		return FR_OK;
   1673          	}
   1674          #endif
   1675          	while (di) {						/* Strip trailing spaces and dots */
   1676          		w = lfn[di-1];
   1677          		if (w != ' ' && w != '.') break;
   1678          		di--;
   1679          	}
   1680          	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   1681          
   1682          	lfn[di] = 0;						/* LFN is created */
   1683          
   1684          	/* Create SFN in directory form */
   1685          	mem_set(dj->fn, ' ', 11);
   1686          	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   1687          	if (si) cf |= NS_LOSS | NS_LFN;
   1688          	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   1689          
   1690          	b = i = 0; ni = 8;
   1691          	for (;;) {
   1692          		w = lfn[si++];					/* Get an LFN char */
   1693          		if (!w) break;					/* Break on end of the LFN */
   1694          		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1695          			cf |= NS_LOSS | NS_LFN; continue;
   1696          		}
   1697          
   1698          		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1699          			if (ni == 11) {				/* Long extension */
   1700          				cf |= NS_LOSS | NS_LFN; break;
   1701          			}
   1702          			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   1703          			if (si > di) break;			/* No extension */
   1704          			si = di; i = 8; ni = 11;	/* Enter extension section */
   1705          			b <<= 2; continue;
   1706          		}
   1707          
   1708          		if (w >= 0x80) {				/* Non ASCII char */
   1709          #ifdef _EXCVT
   1710          			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   1711          			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   1712          #else
   1713          			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
   1714          #endif
   1715          			cf |= NS_LFN;				/* Force create LFN entry */
   1716          		}
   1717          
   1718          		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
   1719          			if (i >= ni - 1) {
   1720          				cf |= NS_LOSS | NS_LFN; i = ni; continue;
   1721          			}
   1722          			dj->fn[i++] = (BYTE)(w >> 8);
   1723          		} else {						/* Single byte char */
   1724          			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   1725          				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   1726          			} else {
   1727          				if (IsUpper(w)) {		/* ASCII large capital */
   1728          					b |= 2;
   1729          				} else {
   1730          					if (IsLower(w)) {	/* ASCII small capital */
   1731          						b |= 1; w -= 0x20;
   1732          					}
   1733          				}
   1734          			}
   1735          		}
   1736          		dj->fn[i++] = (BYTE)w;
   1737          	}
   1738          
   1739          	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   1740          
   1741          	if (ni == 8) b <<= 2;
   1742          	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   1743          		cf |= NS_LFN;
   1744          	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   1745          		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   1746          		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   1747          	}
   1748          
   1749          	dj->fn[NS] = cf;	/* SFN is created */
   1750          
   1751          	return FR_OK;
   1752          
   1753          
   1754          #else	/* Non-LFN configuration */
   1755          	BYTE b, c, d, *sfn;
   1756          	UINT ni, si, i;
   1757          	const char *p;
   1758          
   1759          	/* Create file name in directory form */
   1760          	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1761          	sfn = dj->fn;
   1762          	mem_set(sfn, ' ', 11);
   1763          	si = i = b = 0; ni = 8;
   1764          #if _FS_RPATH
   1765          	if (p[si] == '.') { /* Is this a dot entry? */
   1766          		for (;;) {
   1767          			c = (BYTE)p[si++];
   1768          			if (c != '.' || si >= 3) break;
   1769          			sfn[i++] = c;
   1770          		}
   1771          		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
   1772          		*path = &p[si];									/* Return pointer to the next segment */
   1773          		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
   1774          		return FR_OK;
   1775          	}
   1776          #endif
   1777          	for (;;) {
   1778          		c = (BYTE)p[si++];
   1779          		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
   1780          		if (c == '.' || i >= ni) {
   1781          			if (ni != 8 || c != '.') return FR_INVALID_NAME;
   1782          			i = 8; ni = 11;
   1783          			b <<= 2; continue;
   1784          		}
   1785          		if (c >= 0x80) {				/* Extended char? */
   1786          			b |= 3;						/* Eliminate NT flag */
   1787          #ifdef _EXCVT
   1788          			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
   1789          #else
   1790          #if !_DF1S	/* ASCII only cfg */
   1791          			return FR_INVALID_NAME;
   1792          #endif
   1793          #endif
   1794          		}
   1795          		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
   1796          			d = (BYTE)p[si++];			/* Get 2nd byte */
   1797          			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
   1798          				return FR_INVALID_NAME;
   1799          			sfn[i++] = c;
   1800          			sfn[i++] = d;
   1801          		} else {						/* Single byte code */
   1802          			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
   1803          				return FR_INVALID_NAME;
   1804          			if (IsUpper(c)) {			/* ASCII large capital? */
   1805          				b |= 2;
   1806          			} else {
   1807          				if (IsLower(c)) {		/* ASCII small capital? */
   1808          					b |= 1; c -= 0x20;
   1809          				}
   1810          			}
   1811          			sfn[i++] = c;
   1812          		}
   1813          	}
   1814          	*path = &p[si];						/* Return pointer to the next segment */
   1815          	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1816          
   1817          	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   1818          	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
   1819          
   1820          	if (ni == 8) b <<= 2;
   1821          	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
   1822          	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
   1823          
   1824          	sfn[NS] = c;		/* Store NT flag, File name is created */
   1825          
   1826          	return FR_OK;
   1827          #endif
   1828          }
   1829          
   1830          
   1831          
   1832          
   1833          /*-----------------------------------------------------------------------*/
   1834          /* Get file information from directory entry                             */
   1835          /*-----------------------------------------------------------------------*/
   1836          #if _FS_MINIMIZE <= 1
   1837          static
   1838          void get_fileinfo (		/* No return code */
   1839          	DIR *dj,			/* Pointer to the directory object */
   1840          	FILINFO *fno	 	/* Pointer to the file information to be filled */
   1841          )
   1842          {
   1843          	UINT i;
   1844          	BYTE nt, *dir;
   1845          	TCHAR *p, c;
   1846          
   1847          
   1848          	p = fno->fname;
   1849          	if (dj->sect) {
   1850          		dir = dj->dir;
   1851          		nt = dir[DIR_NTres];		/* NT flag */
   1852          		for (i = 0; i < 8; i++) {	/* Copy name body */
   1853          			c = dir[i];
   1854          			if (c == ' ') break;
   1855          			if (c == NDDE) c = (TCHAR)DDE;
   1856          			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   1857          #if _LFN_UNICODE
   1858          			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
   1859          				c = (c << 8) | dir[++i];
   1860          			c = ff_convert(c, 1);
   1861          			if (!c) c = '?';
   1862          #endif
   1863          			*p++ = c;
   1864          		}
   1865          		if (dir[8] != ' ') {		/* Copy name extension */
   1866          			*p++ = '.';
   1867          			for (i = 8; i < 11; i++) {
   1868          				c = dir[i];
   1869          				if (c == ' ') break;
   1870          				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
   1871          #if _LFN_UNICODE
   1872          				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
   1873          					c = (c << 8) | dir[++i];
   1874          				c = ff_convert(c, 1);
   1875          				if (!c) c = '?';
   1876          #endif
   1877          				*p++ = c;
   1878          			}
   1879          		}
   1880          		fno->fattrib = dir[DIR_Attr];				/* Attribute */
   1881          		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
   1882          		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
   1883          		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
   1884          	}
   1885          	*p = 0;		/* Terminate SFN str by a \0 */
   1886          
   1887          #if _USE_LFN
   1888          	if (fno->lfname && fno->lfsize) {
   1889          		TCHAR *tp = fno->lfname;
   1890          		WCHAR w, *lfn;
   1891          
   1892          		i = 0;
   1893          		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
   1894          			lfn = dj->lfn;
   1895          			while ((w = *lfn++) != 0) {			/* Get an LFN char */
   1896          #if !_LFN_UNICODE
   1897          				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
   1898          				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
   1899          				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
   1900          					tp[i++] = (TCHAR)(w >> 8);
   1901          #endif
   1902          				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
   1903          				tp[i++] = (TCHAR)w;
   1904          			}
   1905          		}
   1906          		tp[i] = 0;	/* Terminate the LFN str by a \0 */
   1907          	}
   1908          #endif
   1909          }
   1910          #endif /* _FS_MINIMIZE <= 1 */
   1911          
   1912          
   1913          
   1914          
   1915          /*-----------------------------------------------------------------------*/
   1916          /* Follow a file path                                                    */
   1917          /*-----------------------------------------------------------------------*/
   1918          
   1919          static
   1920          FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
   1921          	DIR *dj,			/* Directory object to return last directory and found object */
   1922          	const TCHAR *path	/* Full-path string to find a file or directory */
   1923          )
   1924          {
   1925          	FRESULT res;
   1926          	BYTE *dir, ns;
   1927          
   1928          
   1929          #if _FS_RPATH
   1930          	if (*path == '/' || *path == '\\') { /* There is a heading separator */
   1931          		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
   1932          	} else {							/* No heading separator */
   1933          		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
   1934          	}
   1935          #else
   1936          	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   1937          		path++;
   1938          	dj->sclust = 0;						/* Start from the root dir */
   1939          #endif
   1940          
   1941          	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   1942          		res = dir_sdi(dj, 0);
   1943          		dj->dir = 0;
   1944          
   1945          	} else {							/* Follow path */
   1946          		for (;;) {
   1947          			res = create_name(dj, &path);	/* Get a segment */
   1948          			if (res != FR_OK) break;
   1949          			res = dir_find(dj);				/* Find it */
   1950          			ns = *(dj->fn+NS);
   1951          			if (res != FR_OK) {				/* Failed to find the object */
   1952          				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1953          				/* Object not found */
   1954          				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
   1955          					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
   1956          					res = FR_OK;
   1957          					if (!(ns & NS_LAST)) continue;
   1958          				} else {							/* Could not find the object */
   1959          					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   1960          				}
   1961          				break;
   1962          			}
   1963          			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1964          			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   1965          			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   1966          				res = FR_NO_PATH; break;
   1967          			}
   1968          			dj->sclust = LD_CLUST(dir);
   1969          		}
   1970          	}
   1971          
   1972          	return res;
   1973          }
   1974          
   1975          
   1976          
   1977          
   1978          /*-----------------------------------------------------------------------*/
   1979          /* Load a sector and check if it is an FAT Volume Boot Record            */
   1980          /*-----------------------------------------------------------------------*/
   1981          
   1982          static
   1983          BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
   1984          	FATFS *fs,	/* File system object */
   1985          	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
   1986          )
   1987          {
   1988          	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1989          		return 3;
   1990          	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1991          		return 2;
   1992          
   1993          	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   1994          		return 0;
   1995          	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1996          		return 0;
   1997          
   1998          	return 1;
   1999          }
   2000          
   2001          
   2002          
   2003          
   2004          /*-----------------------------------------------------------------------*/
   2005          /* Check if the file system object is valid or not                       */
   2006          /*-----------------------------------------------------------------------*/
   2007          
   2008          static
   2009          FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
   2010          	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
   2011          	FATFS **rfs,		/* Pointer to pointer to the found file system object */
   2012          	BYTE chk_wp			/* !=0: Check media write protection for write access */
   2013          )
   2014          {
   2015          	BYTE fmt, b, pi, *tbl;
   2016          	UINT vol;
   2017          	DSTATUS stat;
   2018          	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
   2019          	WORD nrsv;
   2020          	const TCHAR *p = *path;
   2021          	FATFS *fs;
   2022          
   2023          	/* Get logical drive number from the path name */
   2024          	vol = p[0] - '0';					/* Is there a drive number? */
   2025          	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2026          		p += 2; *path = p;				/* Return pointer to the path name */
   2027          	} else {							/* No drive number is given */
   2028          #if _FS_RPATH
   2029          		vol = CurrVol;					/* Use current drive */
   2030          #else
   2031          		vol = 0;						/* Use drive 0 */
   2032          #endif
   2033          	}
   2034          
   2035          	/* Check if the file system object is valid or not */
   2036          	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2037          		return FR_INVALID_DRIVE;
   2038          	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2039          	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2040          
   2041          	ENTER_FF(fs);						/* Lock file system */
   2042          
   2043          	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2044          		stat = disk_status(fs->drv);
   2045          		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2046          			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2047          				return FR_WRITE_PROTECTED;
   2048          			return FR_OK;				/* The file system object is valid */
   2049          		}
   2050          	}
   2051          
   2052          	/* The file system object is not valid. */
   2053          	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
   2054          
   2055          	fs->fs_type = 0;					/* Clear the file system object */
   2056          	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2057          	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2058          	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2059          		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2060          	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2061          		return FR_WRITE_PROTECTED;
   2062          #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
   2063          	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
   2064          		return FR_DISK_ERR;
   2065          #endif
   2066          	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
   2067          	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2068          	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
   2069          	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2070          		/* Check the partition listed in the partition table */
   2071          		pi = LD2PT(vol);
   2072          		if (pi) pi--;
   2073          		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2074          		if (tbl[4]) {						/* Is the partition existing? */
   2075          			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2076          			fmt = check_fs(fs, bsect);		/* Check the partition */
   2077          		}
   2078          	}
   2079          	if (fmt == 3) return FR_DISK_ERR;
   2080          	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2081          
   2082          	/* An FAT volume is found. Following code initializes the file system object */
   2083          
   2084          	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2085          		return FR_NO_FILESYSTEM;
   2086          
   2087          	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2088          	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2089          	fs->fsize = fasize;
   2090          
   2091          	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2092          	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2093          	fasize *= b;										/* Number of sectors for FAT area */
   2094          
   2095          	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2096          	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2097          
   2098          	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2099          	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2100          
   2101          	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2102          	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2103          
   2104          	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2105          	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2106          
   2107          	/* Determine the FAT sub type */
   2108          	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2109          	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2110          	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2111          	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2112          	fmt = FS_FAT12;
   2113          	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2114          	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2115          
   2116          	/* Boundaries and Limits */
   2117          	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2118          	fs->database = bsect + sysect;						/* Data start sector */
   2119          	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2120          	if (fmt == FS_FAT32) {
   2121          		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2122          		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2123          		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2124          	} else {
   2125          		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2126          		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2127          		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2128          			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2129          	}
   2130          	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2131          		return FR_NO_FILESYSTEM;
   2132          
   2133          #if !_FS_READONLY
   2134          	/* Initialize cluster allocation information */
   2135          	fs->free_clust = 0xFFFFFFFF;
   2136          	fs->last_clust = 0;
   2137          
   2138          	/* Get fsinfo if available */
   2139          	if (fmt == FS_FAT32) {
   2140          	 	fs->fsi_flag = 0;
   2141          		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2142          		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2143          			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2144          			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2145          			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2146          				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2147          				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2148          		}
   2149          	}
   2150          #endif
   2151          	fs->fs_type = fmt;		/* FAT sub-type */
   2152          	fs->id = ++Fsid;		/* File system mount ID */
   2153          	fs->winsect = 0;		/* Invalidate sector cache */
   2154          	fs->wflag = 0;
   2155          #if _FS_RPATH
   2156          	fs->cdir = 0;			/* Current directory (root dir) */
   2157          #endif
   2158          #if _FS_SHARE				/* Clear file lock semaphores */
   2159          	clear_lock(fs);
   2160          #endif
   2161          
   2162          	return FR_OK;
   2163          }
   2164          
   2165          
   2166          
   2167          
   2168          /*-----------------------------------------------------------------------*/
   2169          /* Check if the file/dir object is valid or not                          */
   2170          /*-----------------------------------------------------------------------*/
   2171          
   2172          static
   2173          FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
   2174          	FATFS *fs,		/* Pointer to the file system object */
   2175          	WORD id			/* Member id of the target object to be checked */
   2176          )
   2177          {
   2178          	if (!fs || !fs->fs_type || fs->id != id)
   2179          		return FR_INVALID_OBJECT;
   2180          
   2181          	ENTER_FF(fs);		/* Lock file system */
   2182          
   2183          	if (disk_status(fs->drv) & STA_NOINIT)
   2184          		return FR_NOT_READY;
   2185          
   2186          	return FR_OK;
   2187          }
   2188          
   2189          
   2190          
   2191          
   2192          /*--------------------------------------------------------------------------
   2193          
   2194             Public Functions
   2195          
   2196          --------------------------------------------------------------------------*/
   2197          
   2198          
   2199          
   2200          /*-----------------------------------------------------------------------*/
   2201          /* Mount/Unmount a Logical Drive                                         */
   2202          /*-----------------------------------------------------------------------*/
   2203          
   2204          FRESULT f_mount (
   2205          	BYTE vol,		/* Logical drive number to be mounted/unmounted */
   2206          	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
   2207          )
   2208          {
   2209          	FATFS *rfs;
   2210          
   2211          
   2212          	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2213          		return FR_INVALID_DRIVE;
   2214          	rfs = FatFs[vol];			/* Get current fs object */
   2215          
   2216          	if (rfs) {
   2217          #if _FS_SHARE
   2218          		clear_lock(rfs);
   2219          #endif
   2220          #if _FS_REENTRANT				/* Discard sync object of the current volume */
   2221          		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
   2222          #endif
   2223          		rfs->fs_type = 0;		/* Clear old fs object */
   2224          	}
   2225          
   2226          	if (fs) {
   2227          		fs->fs_type = 0;		/* Clear new fs object */
   2228          #if _FS_REENTRANT				/* Create sync object for the new volume */
   2229          		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
   2230          #endif
   2231          	}
   2232          	FatFs[vol] = fs;			/* Register new fs object */
   2233          
   2234          	return FR_OK;
   2235          }
   2236          
   2237          
   2238          
   2239          
   2240          /*-----------------------------------------------------------------------*/
   2241          /* Open or Create a File                                                 */
   2242          /*-----------------------------------------------------------------------*/
   2243          
   2244          FRESULT f_open (
   2245          	FIL *fp,			/* Pointer to the blank file object */
   2246          	const TCHAR *path,	/* Pointer to the file name */
   2247          	BYTE mode			/* Access mode and file open mode flags */
   2248          )
   2249          {
   2250          	FRESULT res;
   2251          	DIR dj;
   2252          	BYTE *dir;
   2253          	DEF_NAMEBUF;
   2254          
   2255          
   2256          	fp->fs = 0;			/* Clear file object */
   2257          
   2258          #if !_FS_READONLY
   2259          	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2260          	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2261          #else
   2262          	mode &= FA_READ;
   2263          	res = chk_mounted(&path, &dj.fs, 0);
   2264          #endif
   2265          	INIT_BUF(dj);
   2266          	if (res == FR_OK)
   2267          		res = follow_path(&dj, path);	/* Follow the file path */
   2268          	dir = dj.dir;
   2269          
   2270          #if !_FS_READONLY	/* R/W configuration */
   2271          	if (res == FR_OK) {
   2272          		if (!dir)	/* Current dir itself */
   2273          			res = FR_INVALID_NAME;
   2274          #if _FS_SHARE
   2275          		else
   2276          			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
   2277          #endif
   2278          	}
   2279          	/* Create or Open a file */
   2280          	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2281          		DWORD dw, cl;
   2282          
   2283          		if (res != FR_OK) {					/* No file, create new */
   2284          			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2285          #if _FS_SHARE
   2286          				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
   2287          #else
   2288          				res = dir_register(&dj);
   2289          #endif
   2290          			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2291          			dir = dj.dir;					/* New entry */
   2292          		}
   2293          		else {								/* Any object is already existing */
   2294          			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2295          				res = FR_DENIED;
   2296          			} else {
   2297          				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2298          					res = FR_EXIST;
   2299          			}
   2300          		}
   2301          		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2302          			dw = get_fattime();					/* Created time */
   2303          			ST_DWORD(dir+DIR_CrtTime, dw);
   2304          			dir[DIR_Attr] = 0;					/* Reset attribute */
   2305          			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2306          			cl = LD_CLUST(dir);					/* Get start cluster */
   2307          			ST_CLUST(dir, 0);					/* cluster = 0 */
   2308          			dj.fs->wflag = 1;
   2309          			if (cl) {							/* Remove the cluster chain if exist */
   2310          				dw = dj.fs->winsect;
   2311          				res = remove_chain(dj.fs, cl);
   2312          				if (res == FR_OK) {
   2313          					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2314          					res = move_window(dj.fs, dw);
   2315          				}
   2316          			}
   2317          		}
   2318          	}
   2319          	else {	/* Open an existing file */
   2320          		if (res == FR_OK) {						/* Follow succeeded */
   2321          			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2322          				res = FR_NO_FILE;
   2323          			} else {
   2324          				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2325          					res = FR_DENIED;
   2326          			}
   2327          		}
   2328          	}
   2329          	if (res == FR_OK) {
   2330          		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2331          			mode |= FA__WRITTEN;
   2332          		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2333          		fp->dir_ptr = dir;
   2334          #if _FS_SHARE
   2335          		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
   2336          		if (!fp->lockid) res = FR_INT_ERR;
   2337          #endif
   2338          	}
   2339          
   2340          #else				/* R/O configuration */
   2341          	if (res == FR_OK) {					/* Follow succeeded */
   2342          		if (!dir) {						/* Current dir itself */
   2343          			res = FR_INVALID_NAME;
   2344          		} else {
   2345          			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
   2346          				res = FR_NO_FILE;
   2347          		}
   2348          	}
   2349          #endif
   2350          	FREE_BUF();
   2351          
   2352          	if (res == FR_OK) {
   2353          		fp->flag = mode;					/* File access mode */
   2354          		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2355          		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2356          		fp->fptr = 0;						/* File pointer */
   2357          		fp->dsect = 0;
   2358          #if _USE_FASTSEEK
   2359          		fp->cltbl = 0;						/* Normal seek mode */
   2360          #endif
   2361          		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2362          	}
   2363          
   2364          	LEAVE_FF(dj.fs, res);
   2365          }
   2366          
   2367          
   2368          
   2369          
   2370          /*-----------------------------------------------------------------------*/
   2371          /* Read File                                                             */
   2372          /*-----------------------------------------------------------------------*/
   2373          
   2374          FRESULT f_read (
   2375          	FIL *fp, 		/* Pointer to the file object */
   2376          	void *buff,		/* Pointer to data buffer */
   2377          	UINT btr,		/* Number of bytes to read */
   2378          	UINT *br		/* Pointer to number of bytes read */
   2379          )
   2380          {
   2381          	FRESULT res;
   2382          	DWORD clst, sect, remain;
   2383          	UINT rcnt, cc;
   2384          	BYTE csect, *rbuff = buff;
   2385          
   2386          
   2387          	*br = 0;	/* Initialize byte counter */
   2388          
   2389          	res = validate(fp->fs, fp->id);				/* Check validity */
   2390          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2391          	if (fp->flag & FA__ERROR)					/* Aborted file? */
   2392          		LEAVE_FF(fp->fs, FR_INT_ERR);
   2393          	if (!(fp->flag & FA_READ)) 					/* Check access mode */
   2394          		LEAVE_FF(fp->fs, FR_DENIED);
   2395          	remain = fp->fsize - fp->fptr;
   2396          	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   2397          
   2398          	for ( ;  btr;								/* Repeat until all data read */
   2399          		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   2400          		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   2401          			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2402          			if (!csect) {						/* On the cluster boundary? */
   2403          				if (fp->fptr == 0) {			/* On the top of the file? */
   2404          					clst = fp->sclust;			/* Follow from the origin */
   2405          				} else {						/* Middle or end of the file */
   2406          #if _USE_FASTSEEK
   2407          					if (fp->cltbl)
   2408          						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
   2409          					else
   2410          #endif
   2411          						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
   2412          				}
   2413          				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   2414          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2415          				fp->clust = clst;				/* Update current cluster */
   2416          			}
   2417          			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2418          			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2419          			sect += csect;
   2420          			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
   2421          			if (cc) {							/* Read maximum contiguous sectors directly */
   2422          				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2423          					cc = fp->fs->csize - csect;
   2424          				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   2425          					ABORT(fp->fs, FR_DISK_ERR);
   2426          #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
   2427          #if _FS_TINY
   2428          				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
   2429          					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
   2430          #else
   2431          				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
   2432          					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
   2433          #endif
   2434          #endif
   2435          				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
   2436          				continue;
   2437          			}
   2438          #if !_FS_TINY
   2439          			if (fp->dsect != sect) {			/* Load data sector if not in cache */
   2440          #if !_FS_READONLY
   2441          				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
   2442          					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   2443          						ABORT(fp->fs, FR_DISK_ERR);
   2444          					fp->flag &= ~FA__DIRTY;
   2445          				}
   2446          #endif
   2447          				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
   2448          					ABORT(fp->fs, FR_DISK_ERR);
   2449          			}
   2450          #endif
   2451          			fp->dsect = sect;
   2452          		}
   2453          		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   2454          		if (rcnt > btr) rcnt = btr;
   2455          #if _FS_TINY
   2456          		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
   2457          			ABORT(fp->fs, FR_DISK_ERR);
   2458          		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   2459          #else
   2460          		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   2461          #endif
   2462          	}
   2463          
   2464          	LEAVE_FF(fp->fs, FR_OK);
   2465          }
   2466          
   2467          
   2468          
   2469          
   2470          #if !_FS_READONLY
   2471          /*-----------------------------------------------------------------------*/
   2472          /* Write File                                                            */
   2473          /*-----------------------------------------------------------------------*/
   2474          
   2475          FRESULT f_write (
   2476          	FIL *fp,			/* Pointer to the file object */
   2477          	const void *buff,	/* Pointer to the data to be written */
   2478          	UINT btw,			/* Number of bytes to write */
   2479          	UINT *bw			/* Pointer to number of bytes written */
   2480          )
   2481          {
   2482          	FRESULT res;
   2483          	DWORD clst, sect;
   2484          	UINT wcnt, cc;
   2485          	const BYTE *wbuff = buff;
   2486          	BYTE csect;
   2487          
   2488          
   2489          	*bw = 0;	/* Initialize byte counter */
   2490          
   2491          	res = validate(fp->fs, fp->id);			/* Check validity */
   2492          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2493          	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2494          		LEAVE_FF(fp->fs, FR_INT_ERR);
   2495          	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2496          		LEAVE_FF(fp->fs, FR_DENIED);
   2497          	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2498          
   2499          	for ( ;  btw;							/* Repeat until all data written */
   2500          		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2501          		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2502          			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2503          			if (!csect) {					/* On the cluster boundary? */
   2504          				if (fp->fptr == 0) {		/* On the top of the file? */
   2505          					clst = fp->sclust;		/* Follow from the origin */
   2506          					if (clst == 0)			/* When no cluster is allocated, */
   2507          						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2508          				} else {					/* Middle or end of the file */
   2509          #if _USE_FASTSEEK
   2510          					if (fp->cltbl)
   2511          						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
   2512          					else
   2513          #endif
   2514          						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2515          				}
   2516          				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2517          				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2518          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2519          				fp->clust = clst;			/* Update current cluster */
   2520          			}
   2521          #if _FS_TINY
   2522          			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2523          				ABORT(fp->fs, FR_DISK_ERR);
   2524          #else
   2525          			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
   2526          				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   2527          					ABORT(fp->fs, FR_DISK_ERR);
   2528          				fp->flag &= ~FA__DIRTY;
   2529          			}
   2530          #endif
   2531          			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2532          			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2533          			sect += csect;
   2534          			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2535          			if (cc) {						/* Write maximum contiguous sectors directly */
   2536          				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2537          					cc = fp->fs->csize - csect;
   2538          				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2539          					ABORT(fp->fs, FR_DISK_ERR);
   2540          #if _FS_TINY
   2541          				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2542          					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2543          					fp->fs->wflag = 0;
   2544          				}
   2545          #else
   2546          				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   2547          					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   2548          					fp->flag &= ~FA__DIRTY;
   2549          				}
   2550          #endif
   2551          				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2552          				continue;
   2553          			}
   2554          #if _FS_TINY
   2555          			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2556          				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2557          				fp->fs->winsect = sect;
   2558          			}
   2559          #else
   2560          			if (fp->dsect != sect) {		/* Fill sector cache with file data */
   2561          				if (fp->fptr < fp->fsize &&
   2562          					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
   2563          						ABORT(fp->fs, FR_DISK_ERR);
   2564          			}
   2565          #endif
   2566          			fp->dsect = sect;
   2567          		}
   2568          		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2569          		if (wcnt > btw) wcnt = btw;
   2570          #if _FS_TINY
   2571          		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2572          			ABORT(fp->fs, FR_DISK_ERR);
   2573          		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2574          		fp->fs->wflag = 1;
   2575          #else
   2576          		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2577          		fp->flag |= FA__DIRTY;
   2578          #endif
   2579          	}
   2580          
   2581          	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2582          	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2583          
   2584          	LEAVE_FF(fp->fs, FR_OK);
   2585          }
   2586          
   2587          
   2588          
   2589          
   2590          /*-----------------------------------------------------------------------*/
   2591          /* Synchronize the File Object                                           */
   2592          /*-----------------------------------------------------------------------*/
   2593          
   2594          FRESULT f_sync (
   2595          	FIL *fp		/* Pointer to the file object */
   2596          )
   2597          {
   2598          	FRESULT res;
   2599          	DWORD tim;
   2600          	BYTE *dir;
   2601          
   2602          
   2603          	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2604          	if (res == FR_OK) {
   2605          		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2606          #if !_FS_TINY	/* Write-back dirty buffer */
   2607          			if (fp->flag & FA__DIRTY) {
   2608          				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   2609          					LEAVE_FF(fp->fs, FR_DISK_ERR);
   2610          				fp->flag &= ~FA__DIRTY;
   2611          			}
   2612          #endif
   2613          			/* Update the directory entry */
   2614          			res = move_window(fp->fs, fp->dir_sect);
   2615          			if (res == FR_OK) {
   2616          				dir = fp->dir_ptr;
   2617          				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2618          				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2619          				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2620          				tim = get_fattime();						/* Update updated time */
   2621          				ST_DWORD(dir+DIR_WrtTime, tim);
   2622          				fp->flag &= ~FA__WRITTEN;
   2623          				fp->fs->wflag = 1;
   2624          				res = sync(fp->fs);
   2625          			}
   2626          		}
   2627          	}
   2628          
   2629          	LEAVE_FF(fp->fs, res);
   2630          }
   2631          
   2632          #endif /* !_FS_READONLY */
   2633          
   2634          
   2635          
   2636          
   2637          /*-----------------------------------------------------------------------*/
   2638          /* Close File                                                            */
   2639          /*-----------------------------------------------------------------------*/
   2640          
   2641          FRESULT f_close (
   2642          	FIL *fp		/* Pointer to the file object to be closed */
   2643          )
   2644          {
   2645          	FRESULT res;
   2646          
   2647          #if _FS_READONLY
   2648          	FATFS *fs = fp->fs;
   2649          	res = validate(fs, fp->id);
   2650          	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2651          	LEAVE_FF(fs, res);
   2652          
   2653          #else
   2654          	res = f_sync(fp);		/* Flush cached data */
   2655          #if _FS_SHARE
   2656          	if (res == FR_OK) {		/* Decrement open counter */
   2657          #if _FS_REENTRANT
   2658          		res = validate(fp->fs, fp->id);
   2659          		if (res == FR_OK) {
   2660          			res = dec_lock(fp->lockid);	
   2661          			unlock_fs(fp->fs, FR_OK);
   2662          		}
   2663          #else
   2664          		res = dec_lock(fp->lockid);
   2665          #endif
   2666          	}
   2667          #endif
   2668          	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2669          	return res;
   2670          #endif
   2671          }
   2672          
   2673          
   2674          
   2675          
   2676          /*-----------------------------------------------------------------------*/
   2677          /* Current Drive/Directory Handlings                                     */
   2678          /*-----------------------------------------------------------------------*/
   2679          
   2680          #if _FS_RPATH >= 1
   2681          
   2682          FRESULT f_chdrive (
   2683          	BYTE drv		/* Drive number */
   2684          )
   2685          {
   2686          	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
   2687          
   2688          	CurrVol = drv;
   2689          
   2690          	return FR_OK;
   2691          }
   2692          
   2693          
   2694          
   2695          FRESULT f_chdir (
   2696          	const TCHAR *path	/* Pointer to the directory path */
   2697          )
   2698          {
   2699          	FRESULT res;
   2700          	DIR dj;
   2701          	DEF_NAMEBUF;
   2702          
   2703          
   2704          	res = chk_mounted(&path, &dj.fs, 0);
   2705          	if (res == FR_OK) {
   2706          		INIT_BUF(dj);
   2707          		res = follow_path(&dj, path);		/* Follow the path */
   2708          		FREE_BUF();
   2709          		if (res == FR_OK) {					/* Follow completed */
   2710          			if (!dj.dir) {
   2711          				dj.fs->cdir = dj.sclust;	/* Start directory itself */
   2712          			} else {
   2713          				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
   2714          					dj.fs->cdir = LD_CLUST(dj.dir);
   2715          				else
   2716          					res = FR_NO_PATH;		/* Reached but a file */
   2717          			}
   2718          		}
   2719          		if (res == FR_NO_FILE) res = FR_NO_PATH;
   2720          	}
   2721          
   2722          	LEAVE_FF(dj.fs, res);
   2723          }
   2724          
   2725          
   2726          #if _FS_RPATH >= 2
   2727          FRESULT f_getcwd (
   2728          	TCHAR *path,	/* Pointer to the directory path */
   2729          	UINT sz_path	/* Size of path */
   2730          )
   2731          {
   2732          	FRESULT res;
   2733          	DIR dj;
   2734          	UINT i, n;
   2735          	DWORD ccl;
   2736          	TCHAR *tp;
   2737          	FILINFO fno;
   2738          	DEF_NAMEBUF;
   2739          
   2740          
   2741          	*path = 0;
   2742          	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
   2743          	if (res == FR_OK) {
   2744          		INIT_BUF(dj);
   2745          		i = sz_path;		/* Bottom of buffer (dir stack base) */
   2746          		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
   2747          		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
   2748          			res = dir_sdi(&dj, 1);			/* Get parent dir */
   2749          			if (res != FR_OK) break;
   2750          			res = dir_read(&dj);
   2751          			if (res != FR_OK) break;
   2752          			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
   2753          			res = dir_sdi(&dj, 0);
   2754          			if (res != FR_OK) break;
   2755          			do {							/* Find the entry links to the child dir */
   2756          				res = dir_read(&dj);
   2757          				if (res != FR_OK) break;
   2758          				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
   2759          				res = dir_next(&dj, 0);	
   2760          			} while (res == FR_OK);
   2761          			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
   2762          			if (res != FR_OK) break;
   2763          #if _USE_LFN
   2764          			fno.lfname = path;
   2765          			fno.lfsize = i;
   2766          #endif
   2767          			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
   2768          			tp = fno.fname;
   2769          			if (_USE_LFN && *path) tp = path;
   2770          			for (n = 0; tp[n]; n++) ;
   2771          			if (i < n + 3) {
   2772          				res = FR_NOT_ENOUGH_CORE; break;
   2773          			}
   2774          			while (n) path[--i] = tp[--n];
   2775          			path[--i] = '/';
   2776          		}
   2777          		tp = path;
   2778          		if (res == FR_OK) {
   2779          			*tp++ = '0' + CurrVol;			/* Put drive number */
   2780          			*tp++ = ':';
   2781          			if (i == sz_path) {				/* Root-dir */
   2782          				*tp++ = '/';
   2783          			} else {						/* Sub-dir */
   2784          				do		/* Add stacked path str */
   2785          					*tp++ = path[i++];
   2786          				while (i < sz_path);
   2787          			}
   2788          		}
   2789          		*tp = 0;
   2790          		FREE_BUF();
   2791          	}
   2792          
   2793          	LEAVE_FF(dj.fs, res);
   2794          }
   2795          #endif /* _FS_RPATH >= 2 */
   2796          #endif /* _FS_RPATH >= 1 */
   2797          
   2798          
   2799          
   2800          #if _FS_MINIMIZE <= 2
   2801          /*-----------------------------------------------------------------------*/
   2802          /* Seek File R/W Pointer                                                 */
   2803          /*-----------------------------------------------------------------------*/
   2804          
   2805          FRESULT f_lseek (
   2806          	FIL *fp,		/* Pointer to the file object */
   2807          	DWORD ofs		/* File pointer from top of file */
   2808          )
   2809          {
   2810          	FRESULT res;
   2811          
   2812          
   2813          	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2814          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2815          	if (fp->flag & FA__ERROR)			/* Check abort flag */
   2816          		LEAVE_FF(fp->fs, FR_INT_ERR);
   2817          
   2818          #if _USE_FASTSEEK
   2819          	if (fp->cltbl) {	/* Fast seek */
   2820          		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
   2821          
   2822          		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
   2823          			tbl = fp->cltbl;
   2824          			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
   2825          			cl = fp->sclust;			/* Top of the chain */
   2826          			if (cl) {
   2827          				do {
   2828          					/* Get a fragment */
   2829          					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
   2830          					do {
   2831          						pcl = cl; ncl++;
   2832          						cl = get_fat(fp->fs, cl);
   2833          						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
   2834          						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2835          					} while (cl == pcl + 1);
   2836          					if (ulen <= tlen) {		/* Store the length and top of the fragment */
   2837          						*tbl++ = ncl; *tbl++ = tcl;
   2838          					}
   2839          				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
   2840          			}
   2841          			*fp->cltbl = ulen;	/* Number of items used */
   2842          			if (ulen <= tlen)
   2843          				*tbl = 0;		/* Terminate table */
   2844          			else
   2845          				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
   2846          
   2847          		} else {						/* Fast seek */
   2848          			if (ofs > fp->fsize)		/* Clip offset at the file size */
   2849          				ofs = fp->fsize;
   2850          			fp->fptr = ofs;				/* Set file pointer */
   2851          			if (ofs) {
   2852          				fp->clust = clmt_clust(fp, ofs - 1);
   2853          				dsc = clust2sect(fp->fs, fp->clust);
   2854          				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
   2855          				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
   2856          				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
   2857          #if !_FS_TINY
   2858          #if !_FS_READONLY
   2859          					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
   2860          						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   2861          							ABORT(fp->fs, FR_DISK_ERR);
   2862          						fp->flag &= ~FA__DIRTY;
   2863          					}
   2864          #endif
   2865          					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
   2866          						ABORT(fp->fs, FR_DISK_ERR);
   2867          #endif
   2868          					fp->dsect = dsc;
   2869          				}
   2870          			}
   2871          		}
   2872          	} else
   2873          #endif
   2874          
   2875          	/* Normal Seek */
   2876          	{
   2877          		DWORD clst, bcs, nsect, ifptr;
   2878          
   2879          		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
   2880          #if !_FS_READONLY
   2881          			 && !(fp->flag & FA_WRITE)
   2882          #endif
   2883          			) ofs = fp->fsize;
   2884          
   2885          		ifptr = fp->fptr;
   2886          		fp->fptr = nsect = 0;
   2887          		if (ofs) {
   2888          			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
   2889          			if (ifptr > 0 &&
   2890          				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   2891          				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
   2892          				ofs -= fp->fptr;
   2893          				clst = fp->clust;
   2894          			} else {									/* When seek to back cluster, */
   2895          				clst = fp->sclust;						/* start from the first cluster */
   2896          #if !_FS_READONLY
   2897          				if (clst == 0) {						/* If no cluster chain, create a new chain */
   2898          					clst = create_chain(fp->fs, 0);
   2899          					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2900          					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2901          					fp->sclust = clst;
   2902          				}
   2903          #endif
   2904          				fp->clust = clst;
   2905          			}
   2906          			if (clst != 0) {
   2907          				while (ofs > bcs) {						/* Cluster following loop */
   2908          #if !_FS_READONLY
   2909          					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   2910          						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
   2911          						if (clst == 0) {				/* When disk gets full, clip file size */
   2912          							ofs = bcs; break;
   2913          						}
   2914          					} else
   2915          #endif
   2916          						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
   2917          					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2918          					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
   2919          					fp->clust = clst;
   2920          					fp->fptr += bcs;
   2921          					ofs -= bcs;
   2922          				}
   2923          				fp->fptr += ofs;
   2924          				if (ofs % SS(fp->fs)) {
   2925          					nsect = clust2sect(fp->fs, clst);	/* Current sector */
   2926          					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
   2927          					nsect += ofs / SS(fp->fs);
   2928          				}
   2929          			}
   2930          		}
   2931          		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
   2932          #if !_FS_TINY
   2933          #if !_FS_READONLY
   2934          			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
   2935          				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   2936          					ABORT(fp->fs, FR_DISK_ERR);
   2937          				fp->flag &= ~FA__DIRTY;
   2938          			}
   2939          #endif
   2940          			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
   2941          				ABORT(fp->fs, FR_DISK_ERR);
   2942          #endif
   2943          			fp->dsect = nsect;
   2944          		}
   2945          #if !_FS_READONLY
   2946          		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
   2947          			fp->fsize = fp->fptr;
   2948          			fp->flag |= FA__WRITTEN;
   2949          		}
   2950          #endif
   2951          	}
   2952          
   2953          	LEAVE_FF(fp->fs, res);
   2954          }
   2955          
   2956          
   2957          
   2958          #if _FS_MINIMIZE <= 1
   2959          /*-----------------------------------------------------------------------*/
   2960          /* Create a Directroy Object                                             */
   2961          /*-----------------------------------------------------------------------*/
   2962          
   2963          FRESULT f_opendir (
   2964          	DIR *dj,			/* Pointer to directory object to create */
   2965          	const TCHAR *path	/* Pointer to the directory path */
   2966          )
   2967          {
   2968          	FRESULT res;
   2969          	DEF_NAMEBUF;
   2970          
   2971          
   2972          	res = chk_mounted(&path, &dj->fs, 0);
   2973          	if (res == FR_OK) {
   2974          		INIT_BUF(*dj);
   2975          		res = follow_path(dj, path);			/* Follow the path to the directory */
   2976          		FREE_BUF();
   2977          		if (res == FR_OK) {						/* Follow completed */
   2978          			if (dj->dir) {						/* It is not the root dir */
   2979          				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
   2980          					dj->sclust = LD_CLUST(dj->dir);
   2981          				} else {						/* The object is not a directory */
   2982          					res = FR_NO_PATH;
   2983          				}
   2984          			}
   2985          			if (res == FR_OK) {
   2986          				dj->id = dj->fs->id;
   2987          				res = dir_sdi(dj, 0);			/* Rewind dir */
   2988          			}
   2989          		}
   2990          		if (res == FR_NO_FILE) res = FR_NO_PATH;
   2991          	}
   2992          
   2993          	LEAVE_FF(dj->fs, res);
   2994          }
   2995          
   2996          
   2997          
   2998          
   2999          /*-----------------------------------------------------------------------*/
   3000          /* Read Directory Entry in Sequense                                      */
   3001          /*-----------------------------------------------------------------------*/
   3002          
   3003          FRESULT f_readdir (
   3004          	DIR *dj,			/* Pointer to the open directory object */
   3005          	FILINFO *fno		/* Pointer to file information to return */
   3006          )
   3007          {
   3008          	FRESULT res;
   3009          	DEF_NAMEBUF;
   3010          
   3011          
   3012          	res = validate(dj->fs, dj->id);			/* Check validity of the object */
   3013          	if (res == FR_OK) {
   3014          		if (!fno) {
   3015          			res = dir_sdi(dj, 0);			/* Rewind the directory object */
   3016          		} else {
   3017          			INIT_BUF(*dj);
   3018          			res = dir_read(dj);				/* Read an directory item */
   3019          			if (res == FR_NO_FILE) {		/* Reached end of dir */
   3020          				dj->sect = 0;
   3021          				res = FR_OK;
   3022          			}
   3023          			if (res == FR_OK) {				/* A valid entry is found */
   3024          				get_fileinfo(dj, fno);		/* Get the object information */
   3025          				res = dir_next(dj, 0);		/* Increment index for next */
   3026          				if (res == FR_NO_FILE) {
   3027          					dj->sect = 0;
   3028          					res = FR_OK;
   3029          				}
   3030          			}
   3031          			FREE_BUF();
   3032          		}
   3033          	}
   3034          
   3035          	LEAVE_FF(dj->fs, res);
   3036          }
   3037          
   3038          
   3039          
   3040          #if _FS_MINIMIZE == 0
   3041          /*-----------------------------------------------------------------------*/
   3042          /* Get File Status                                                       */
   3043          /*-----------------------------------------------------------------------*/
   3044          
   3045          FRESULT f_stat (
   3046          	const TCHAR *path,	/* Pointer to the file path */
   3047          	FILINFO *fno		/* Pointer to file information to return */
   3048          )
   3049          {
   3050          	FRESULT res;
   3051          	DIR dj;
   3052          	DEF_NAMEBUF;
   3053          
   3054          
   3055          	res = chk_mounted(&path, &dj.fs, 0);
   3056          	if (res == FR_OK) {
   3057          		INIT_BUF(dj);
   3058          		res = follow_path(&dj, path);	/* Follow the file path */
   3059          		if (res == FR_OK) {				/* Follow completed */
   3060          			if (dj.dir)		/* Found an object */
   3061          				get_fileinfo(&dj, fno);
   3062          			else			/* It is root dir */
   3063          				res = FR_INVALID_NAME;
   3064          		}
   3065          		FREE_BUF();
   3066          	}
   3067          
   3068          	LEAVE_FF(dj.fs, res);
   3069          }
   3070          
   3071          
   3072          
   3073          #if !_FS_READONLY
   3074          /*-----------------------------------------------------------------------*/
   3075          /* Get Number of Free Clusters                                           */
   3076          /*-----------------------------------------------------------------------*/
   3077          
   3078          FRESULT f_getfree (
   3079          	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
   3080          	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
   3081          	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
   3082          )
   3083          {
   3084          	FRESULT res;
   3085          	DWORD n, clst, sect, stat;
   3086          	UINT i;
   3087          	BYTE fat, *p;
   3088          
   3089          
   3090          	/* Get drive number */
   3091          	res = chk_mounted(&path, fatfs, 0);
   3092          	if (res == FR_OK) {
   3093          		/* If free_clust is valid, return it without full cluster scan */
   3094          		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
   3095          			*nclst = (*fatfs)->free_clust;
   3096          		} else {
   3097          			/* Get number of free clusters */
   3098          			fat = (*fatfs)->fs_type;
   3099          			n = 0;
   3100          			if (fat == FS_FAT12) {
   3101          				clst = 2;
   3102          				do {
   3103          					stat = get_fat(*fatfs, clst);
   3104          					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   3105          					if (stat == 1) { res = FR_INT_ERR; break; }
   3106          					if (stat == 0) n++;
   3107          				} while (++clst < (*fatfs)->n_fatent);
   3108          			} else {
   3109          				clst = (*fatfs)->n_fatent;
   3110          				sect = (*fatfs)->fatbase;
   3111          				i = 0; p = 0;
   3112          				do {
   3113          					if (!i) {
   3114          						res = move_window(*fatfs, sect++);
   3115          						if (res != FR_OK) break;
   3116          						p = (*fatfs)->win;
   3117          						i = SS(*fatfs);
   3118          					}
   3119          					if (fat == FS_FAT16) {
   3120          						if (LD_WORD(p) == 0) n++;
   3121          						p += 2; i -= 2;
   3122          					} else {
   3123          						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
   3124          						p += 4; i -= 4;
   3125          					}
   3126          				} while (--clst);
   3127          			}
   3128          			(*fatfs)->free_clust = n;
   3129          			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
   3130          			*nclst = n;
   3131          		}
   3132          	}
   3133          	LEAVE_FF(*fatfs, res);
   3134          }
   3135          
   3136          
   3137          
   3138          
   3139          /*-----------------------------------------------------------------------*/
   3140          /* Truncate File                                                         */
   3141          /*-----------------------------------------------------------------------*/
   3142          
   3143          FRESULT f_truncate (
   3144          	FIL *fp		/* Pointer to the file object */
   3145          )
   3146          {
   3147          	FRESULT res;
   3148          	DWORD ncl;
   3149          
   3150          
   3151          	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   3152          	if (res == FR_OK) {
   3153          		if (fp->flag & FA__ERROR) {			/* Check abort flag */
   3154          			res = FR_INT_ERR;
   3155          		} else {
   3156          			if (!(fp->flag & FA_WRITE))		/* Check access mode */
   3157          				res = FR_DENIED;
   3158          		}
   3159          	}
   3160          	if (res == FR_OK) {
   3161          		if (fp->fsize > fp->fptr) {
   3162          			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
   3163          			fp->flag |= FA__WRITTEN;
   3164          			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   3165          				res = remove_chain(fp->fs, fp->sclust);
   3166          				fp->sclust = 0;
   3167          			} else {				/* When truncate a part of the file, remove remaining clusters */
   3168          				ncl = get_fat(fp->fs, fp->clust);
   3169          				res = FR_OK;
   3170          				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   3171          				if (ncl == 1) res = FR_INT_ERR;
   3172          				if (res == FR_OK && ncl < fp->fs->n_fatent) {
   3173          					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
   3174          					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
   3175          				}
   3176          			}
   3177          		}
   3178          		if (res != FR_OK) fp->flag |= FA__ERROR;
   3179          	}
   3180          
   3181          	LEAVE_FF(fp->fs, res);
   3182          }
   3183          
   3184          
   3185          
   3186          
   3187          /*-----------------------------------------------------------------------*/
   3188          /* Delete a File or Directory                                            */
   3189          /*-----------------------------------------------------------------------*/
   3190          
   3191          FRESULT f_unlink (
   3192          	const TCHAR *path		/* Pointer to the file or directory path */
   3193          )
   3194          {
   3195          	FRESULT res;
   3196          	DIR dj, sdj;
   3197          	BYTE *dir;
   3198          	DWORD dclst;
   3199          	DEF_NAMEBUF;
   3200          
   3201          
   3202          	res = chk_mounted(&path, &dj.fs, 1);
   3203          	if (res == FR_OK) {
   3204          		INIT_BUF(dj);
   3205          		res = follow_path(&dj, path);		/* Follow the file path */
   3206          		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   3207          			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
   3208          #if _FS_SHARE
   3209          		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
   3210          #endif
   3211          		if (res == FR_OK) {					/* The object is accessible */
   3212          			dir = dj.dir;
   3213          			if (!dir) {
   3214          				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
   3215          			} else {
   3216          				if (dir[DIR_Attr] & AM_RDO)
   3217          					res = FR_DENIED;		/* Cannot remove R/O object */
   3218          			}
   3219          			dclst = LD_CLUST(dir);
   3220          			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
   3221          				if (dclst < 2) {
   3222          					res = FR_INT_ERR;
   3223          				} else {
   3224          					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
   3225          					sdj.sclust = dclst;
   3226          					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
   3227          					if (res == FR_OK) {
   3228          						res = dir_read(&sdj);
   3229          						if (res == FR_OK			/* Not empty dir */
   3230          #if _FS_RPATH
   3231          						|| dclst == sdj.fs->cdir	/* Current dir */
   3232          #endif
   3233          						) res = FR_DENIED;
   3234          						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
   3235          					}
   3236          				}
   3237          			}
   3238          			if (res == FR_OK) {
   3239          				res = dir_remove(&dj);		/* Remove the directory entry */
   3240          				if (res == FR_OK) {
   3241          					if (dclst)				/* Remove the cluster chain if exist */
   3242          						res = remove_chain(dj.fs, dclst);
   3243          					if (res == FR_OK) res = sync(dj.fs);
   3244          				}
   3245          			}
   3246          		}
   3247          		FREE_BUF();
   3248          	}
   3249          	LEAVE_FF(dj.fs, res);
   3250          }
   3251          
   3252          
   3253          
   3254          
   3255          /*-----------------------------------------------------------------------*/
   3256          /* Create a Directory                                                    */
   3257          /*-----------------------------------------------------------------------*/
   3258          
   3259          FRESULT f_mkdir (
   3260          	const TCHAR *path		/* Pointer to the directory path */
   3261          )
   3262          {
   3263          	FRESULT res;
   3264          	DIR dj;
   3265          	BYTE *dir, n;
   3266          	DWORD dsc, dcl, pcl, tim = get_fattime();
   3267          	DEF_NAMEBUF;
   3268          
   3269          
   3270          	res = chk_mounted(&path, &dj.fs, 1);
   3271          	if (res == FR_OK) {
   3272          		INIT_BUF(dj);
   3273          		res = follow_path(&dj, path);			/* Follow the file path */
   3274          		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
   3275          		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
   3276          			res = FR_INVALID_NAME;
   3277          		if (res == FR_NO_FILE) {				/* Can create a new directory */
   3278          			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
   3279          			res = FR_OK;
   3280          			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
   3281          			if (dcl == 1) res = FR_INT_ERR;
   3282          			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
   3283          			if (res == FR_OK)					/* Flush FAT */
   3284          				res = move_window(dj.fs, 0);
   3285          			if (res == FR_OK) {					/* Initialize the new directory table */
   3286          				dsc = clust2sect(dj.fs, dcl);
   3287          				dir = dj.fs->win;
   3288          				mem_set(dir, 0, SS(dj.fs));
   3289          				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
   3290          				dir[DIR_Name] = '.';
   3291          				dir[DIR_Attr] = AM_DIR;
   3292          				ST_DWORD(dir+DIR_WrtTime, tim);
   3293          				ST_CLUST(dir, dcl);
   3294          				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
   3295          				dir[33] = '.'; pcl = dj.sclust;
   3296          				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
   3297          					pcl = 0;
   3298          				ST_CLUST(dir+SZ_DIR, pcl);
   3299          				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
   3300          					dj.fs->winsect = dsc++;
   3301          					dj.fs->wflag = 1;
   3302          					res = move_window(dj.fs, 0);
   3303          					if (res != FR_OK) break;
   3304          					mem_set(dir, 0, SS(dj.fs));
   3305          				}
   3306          			}
   3307          			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
   3308          			if (res != FR_OK) {
   3309          				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
   3310          			} else {
   3311          				dir = dj.dir;
   3312          				dir[DIR_Attr] = AM_DIR;				/* Attribute */
   3313          				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
   3314          				ST_CLUST(dir, dcl);					/* Table start cluster */
   3315          				dj.fs->wflag = 1;
   3316          				res = sync(dj.fs);
   3317          			}
   3318          		}
   3319          		FREE_BUF();
   3320          	}
   3321          
   3322          	LEAVE_FF(dj.fs, res);
   3323          }
   3324          
   3325          
   3326          
   3327          
   3328          /*-----------------------------------------------------------------------*/
   3329          /* Change Attribute                                                      */
   3330          /*-----------------------------------------------------------------------*/
   3331          
   3332          FRESULT f_chmod (
   3333          	const TCHAR *path,	/* Pointer to the file path */
   3334          	BYTE value,			/* Attribute bits */
   3335          	BYTE mask			/* Attribute mask to change */
   3336          )
   3337          {
   3338          	FRESULT res;
   3339          	DIR dj;
   3340          	BYTE *dir;
   3341          	DEF_NAMEBUF;
   3342          
   3343          
   3344          	res = chk_mounted(&path, &dj.fs, 1);
   3345          	if (res == FR_OK) {
   3346          		INIT_BUF(dj);
   3347          		res = follow_path(&dj, path);		/* Follow the file path */
   3348          		FREE_BUF();
   3349          		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   3350          			res = FR_INVALID_NAME;
   3351          		if (res == FR_OK) {
   3352          			dir = dj.dir;
   3353          			if (!dir) {						/* Is it a root directory? */
   3354          				res = FR_INVALID_NAME;
   3355          			} else {						/* File or sub directory */
   3356          				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
   3357          				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
   3358          				dj.fs->wflag = 1;
   3359          				res = sync(dj.fs);
   3360          			}
   3361          		}
   3362          	}
   3363          
   3364          	LEAVE_FF(dj.fs, res);
   3365          }
   3366          
   3367          
   3368          
   3369          
   3370          /*-----------------------------------------------------------------------*/
   3371          /* Change Timestamp                                                      */
   3372          /*-----------------------------------------------------------------------*/
   3373          
   3374          FRESULT f_utime (
   3375          	const TCHAR *path,	/* Pointer to the file/directory name */
   3376          	const FILINFO *fno	/* Pointer to the time stamp to be set */
   3377          )
   3378          {
   3379          	FRESULT res;
   3380          	DIR dj;
   3381          	BYTE *dir;
   3382          	DEF_NAMEBUF;
   3383          
   3384          
   3385          	res = chk_mounted(&path, &dj.fs, 1);
   3386          	if (res == FR_OK) {
   3387          		INIT_BUF(dj);
   3388          		res = follow_path(&dj, path);	/* Follow the file path */
   3389          		FREE_BUF();
   3390          		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   3391          			res = FR_INVALID_NAME;
   3392          		if (res == FR_OK) {
   3393          			dir = dj.dir;
   3394          			if (!dir) {					/* Root directory */
   3395          				res = FR_INVALID_NAME;
   3396          			} else {					/* File or sub-directory */
   3397          				ST_WORD(dir+DIR_WrtTime, fno->ftime);
   3398          				ST_WORD(dir+DIR_WrtDate, fno->fdate);
   3399          				dj.fs->wflag = 1;
   3400          				res = sync(dj.fs);
   3401          			}
   3402          		}
   3403          	}
   3404          
   3405          	LEAVE_FF(dj.fs, res);
   3406          }
   3407          
   3408          
   3409          
   3410          
   3411          /*-----------------------------------------------------------------------*/
   3412          /* Rename File/Directory                                                 */
   3413          /*-----------------------------------------------------------------------*/
   3414          
   3415          FRESULT f_rename (
   3416          	const TCHAR *path_old,	/* Pointer to the old name */
   3417          	const TCHAR *path_new	/* Pointer to the new name */
   3418          )
   3419          {
   3420          	FRESULT res;
   3421          	DIR djo, djn;
   3422          	BYTE buf[21], *dir;
   3423          	DWORD dw;
   3424          	DEF_NAMEBUF;
   3425          
   3426          
   3427          	res = chk_mounted(&path_old, &djo.fs, 1);
   3428          	if (res == FR_OK) {
   3429          		djn.fs = djo.fs;
   3430          		INIT_BUF(djo);
   3431          		res = follow_path(&djo, path_old);		/* Check old object */
   3432          		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
   3433          			res = FR_INVALID_NAME;
   3434          #if _FS_SHARE
   3435          		if (res == FR_OK) res = chk_lock(&djo, 2);
   3436          #endif
   3437          		if (res == FR_OK) {						/* Old object is found */
   3438          			if (!djo.dir) {						/* Is root dir? */
   3439          				res = FR_NO_FILE;
   3440          			} else {
   3441          				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
   3442          				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
   3443          				res = follow_path(&djn, path_new);
   3444          				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
   3445          				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
   3446          /* Start critical section that any interruption or error can cause cross-link */
   3447          					res = dir_register(&djn);			/* Register the new entry */
   3448          					if (res == FR_OK) {
   3449          						dir = djn.dir;					/* Copy object information except for name */
   3450          						mem_cpy(dir+13, buf+2, 19);
   3451          						dir[DIR_Attr] = buf[0] | AM_ARC;
   3452          						djo.fs->wflag = 1;
   3453          						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
   3454          							dw = clust2sect(djn.fs, LD_CLUST(dir));
   3455          							if (!dw) {
   3456          								res = FR_INT_ERR;
   3457          							} else {
   3458          								res = move_window(djn.fs, dw);
   3459          								dir = djn.fs->win+SZ_DIR;	/* .. entry */
   3460          								if (res == FR_OK && dir[1] == '.') {
   3461          									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
   3462          									ST_CLUST(dir, dw);
   3463          									djn.fs->wflag = 1;
   3464          								}
   3465          							}
   3466          						}
   3467          						if (res == FR_OK) {
   3468          							res = dir_remove(&djo);		/* Remove old entry */
   3469          							if (res == FR_OK)
   3470          								res = sync(djo.fs);
   3471          						}
   3472          					}
   3473          /* End critical section */
   3474          				}
   3475          			}
   3476          		}
   3477          		FREE_BUF();
   3478          	}
   3479          	LEAVE_FF(djo.fs, res);
   3480          }
   3481          
   3482          #endif /* !_FS_READONLY */
   3483          #endif /* _FS_MINIMIZE == 0 */
   3484          #endif /* _FS_MINIMIZE <= 1 */
   3485          #endif /* _FS_MINIMIZE <= 2 */
   3486          
   3487          
   3488          
   3489          /*-----------------------------------------------------------------------*/
   3490          /* Forward data to the stream directly (available on only tiny cfg)      */
   3491          /*-----------------------------------------------------------------------*/
   3492          #if _USE_FORWARD && _FS_TINY
   3493          
   3494          FRESULT f_forward (
   3495          	FIL *fp, 						/* Pointer to the file object */
   3496          	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
   3497          	UINT btr,						/* Number of bytes to forward */
   3498          	UINT *bf						/* Pointer to number of bytes forwarded */
   3499          )
   3500          {
   3501          	FRESULT res;
   3502          	DWORD remain, clst, sect;
   3503          	UINT rcnt;
   3504          	BYTE csect;
   3505          
   3506          
   3507          	*bf = 0;	/* Initialize byte counter */
   3508          
   3509          	res = validate(fp->fs, fp->id);					/* Check validity of the object */
   3510          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   3511          	if (fp->flag & FA__ERROR)						/* Check error flag */
   3512          		LEAVE_FF(fp->fs, FR_INT_ERR);
   3513          	if (!(fp->flag & FA_READ))						/* Check access mode */
   3514          		LEAVE_FF(fp->fs, FR_DENIED);
   3515          
   3516          	remain = fp->fsize - fp->fptr;
   3517          	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
   3518          
   3519          	for ( ;  btr && (*func)(0, 0);					/* Repeat until all data transferred or stream becomes busy */
   3520          		fp->fptr += rcnt, *bf += rcnt, btr -= rcnt) {
   3521          		csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   3522          		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
   3523          			if (!csect) {							/* On the cluster boundary? */
   3524          				clst = (fp->fptr == 0) ?			/* On the top of the file? */
   3525          					fp->sclust : get_fat(fp->fs, fp->clust);
   3526          				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
   3527          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   3528          				fp->clust = clst;					/* Update current cluster */
   3529          			}
   3530          		}
   3531          		sect = clust2sect(fp->fs, fp->clust);		/* Get current data sector */
   3532          		if (!sect) ABORT(fp->fs, FR_INT_ERR);
   3533          		sect += csect;
   3534          		if (move_window(fp->fs, sect))				/* Move sector window */
   3535          			ABORT(fp->fs, FR_DISK_ERR);
   3536          		fp->dsect = sect;
   3537          		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
   3538          		if (rcnt > btr) rcnt = btr;
   3539          		rcnt = (*func)(&fp->fs->win[(WORD)fp->fptr % SS(fp->fs)], rcnt);
   3540          		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
   3541          	}
   3542          
   3543          	LEAVE_FF(fp->fs, FR_OK);
   3544          }
   3545          #endif /* _USE_FORWARD */
   3546          
   3547          
   3548          
   3549          #if _USE_MKFS && !_FS_READONLY
   3550          /*-----------------------------------------------------------------------*/
   3551          /* Create File System on the Drive                                       */
   3552          /*-----------------------------------------------------------------------*/
   3553          #define N_ROOTDIR	512		/* Number of root dir entries for FAT12/16 */
   3554          #define N_FATS		1		/* Number of FAT copies (1 or 2) */
   3555          
   3556          
   3557          FRESULT f_mkfs (
   3558          	BYTE drv,		/* Logical drive number */
   3559          	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
   3560          	UINT au			/* Allocation unit size [bytes] */
   3561          )
   3562          {
   3563          	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
   3564          	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
   3565          	BYTE fmt, md, sys, *tbl, pdrv, part;
   3566          	DWORD n_clst, vs, n, wsect;
   3567          	UINT i;
   3568          	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
   3569          	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
   3570          	FATFS *fs;
   3571          	DSTATUS stat;
   3572          
   3573          
   3574          	/* Check mounted drive and clear work area */
   3575          	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
   3576          	if (sfd > 1) return FR_INVALID_PARAMETER;
   3577          	if (au & (au - 1)) return FR_INVALID_PARAMETER;
   3578          	fs = FatFs[drv];
   3579          	if (!fs) return FR_NOT_ENABLED;
   3580          	fs->fs_type = 0;
   3581          	pdrv = LD2PD(drv);	/* Physical drive */
   3582          	part = LD2PT(drv);	/* Partition (0:auto detect, 1-4:get from partition table)*/
   3583          
   3584          	/* Get disk statics */
   3585          	stat = disk_initialize(pdrv);
   3586          	if (stat & STA_NOINIT) return FR_NOT_READY;
   3587          	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   3588          #if _MAX_SS != 512					/* Get disk sector size */
   3589          	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
   3590          		return FR_DISK_ERR;
   3591          #endif
   3592          	if (_MULTI_PARTITION && part) {
   3593          		/* Get partition information from partition table in the MBR */
   3594          		if (disk_read(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
   3595          		if (LD_WORD(fs->win+BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
   3596          		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
   3597          		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
   3598          		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
   3599          		n_vol = LD_DWORD(tbl+12);	/* Volume size */
   3600          	} else {
   3601          		/* Create a partition in this function */
   3602          		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
   3603          			return FR_DISK_ERR;
   3604          		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
   3605          		n_vol -= b_vol;				/* Volume size */
   3606          	}
   3607          
   3608          	if (!au) {				/* AU auto selection */
   3609          		vs = n_vol / (2000 / (SS(fs) / 512));
   3610          		for (i = 0; vs < vst[i]; i++) ;
   3611          		au = cst[i];
   3612          	}
   3613          	au /= SS(fs);		/* Number of sectors per cluster */
   3614          	if (au == 0) au = 1;
   3615          	if (au > 128) au = 128;
   3616          
   3617          	/* Pre-compute number of clusters and FAT syb-type */
   3618          	n_clst = n_vol / au;
   3619          	fmt = FS_FAT12;
   3620          	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
   3621          	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
   3622          
   3623          	/* Determine offset and size of FAT structure */
   3624          	if (fmt == FS_FAT32) {
   3625          		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
   3626          		n_rsv = 32;
   3627          		n_dir = 0;
   3628          	} else {
   3629          		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
   3630          		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
   3631          		n_rsv = 1;
   3632          		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
   3633          	}
   3634          	b_fat = b_vol + n_rsv;				/* FAT area start sector */
   3635          	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
   3636          	b_data = b_dir + n_dir;				/* Data area start sector */
   3637          	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
   3638          
   3639          	/* Align data start sector to erase block boundary (for flash memory media) */
   3640          	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
   3641          	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
   3642          	n = (n - b_data) / N_FATS;
   3643          	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
   3644          		n_rsv += n;
   3645          		b_fat += n;
   3646          	} else {					/* FAT12/16: Expand FAT size */
   3647          		n_fat += n;
   3648          	}
   3649          
   3650          	/* Determine number of clusters and final check of validity of the FAT sub-type */
   3651          	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
   3652          	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
   3653          		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
   3654          		return FR_MKFS_ABORTED;
   3655          
   3656          	switch (fmt) {	/* Determine system ID for partition table */
   3657          	case FS_FAT12:	sys = 0x01; break;
   3658          	case FS_FAT16:	sys = (n_vol < 0x10000) ? 0x04 : 0x06; break;
   3659          	default: 		sys = 0x0C;
   3660          	}
   3661          
   3662          	if (_MULTI_PARTITION && part) {
   3663          		/* Update system ID in the partition table */
   3664          		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
   3665          		tbl[4] = sys;
   3666          		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
   3667          		md = 0xF8;
   3668          	} else {
   3669          		if (sfd) {	/* No patition table (SFD) */
   3670          			md = 0xF0;
   3671          		} else {	/* Create partition table (FDISK) */
   3672          			mem_set(fs->win, 0, SS(fs));
   3673          			tbl = fs->win+MBR_Table;	/* Create partiton table for single partition in the drive */
   3674          			tbl[1] = 1;						/* Partition start head */
   3675          			tbl[2] = 1;						/* Partition start sector */
   3676          			tbl[3] = 0;						/* Partition start cylinder */
   3677          			tbl[4] = sys;					/* System type */
   3678          			tbl[5] = 254;					/* Partition end head */
   3679          			n = (b_vol + n_vol) / 63 / 255;
   3680          			tbl[6] = (BYTE)((n >> 2) | 63);	/* Partiiton end sector */
   3681          			tbl[7] = (BYTE)n;				/* End cylinder */
   3682          			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
   3683          			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
   3684          			ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
   3685          			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR sector */
   3686          				return FR_DISK_ERR;
   3687          			md = 0xF8;
   3688          		}
   3689          	}
   3690          
   3691          	/* Create BPB in the VBR */
   3692          	tbl = fs->win;							/* Clear sector */
   3693          	mem_set(tbl, 0, SS(fs));
   3694          	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
   3695          	i = SS(fs);								/* Sector size */
   3696          	ST_WORD(tbl+BPB_BytsPerSec, i);
   3697          	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
   3698          	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
   3699          	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
   3700          	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of rootdir entries */
   3701          	ST_WORD(tbl+BPB_RootEntCnt, i);
   3702          	if (n_vol < 0x10000) {					/* Number of total sectors */
   3703          		ST_WORD(tbl+BPB_TotSec16, n_vol);
   3704          	} else {
   3705          		ST_DWORD(tbl+BPB_TotSec32, n_vol);
   3706          	}
   3707          	tbl[BPB_Media] = md;					/* Media descriptor */
   3708          	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
   3709          	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
   3710          	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
   3711          	n = get_fattime();						/* Use current time as VSN */
   3712          	if (fmt == FS_FAT32) {
   3713          		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
   3714          		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
   3715          		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
   3716          		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSInfo record offset (VBR+1) */
   3717          		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
   3718          		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
   3719          		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
   3720          		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
   3721          	} else {
   3722          		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
   3723          		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
   3724          		tbl[BS_DrvNum] = 0x80;				/* Drive number */
   3725          		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
   3726          		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
   3727          	}
   3728          	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
   3729          	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
   3730          		return FR_DISK_ERR;
   3731          	if (fmt == FS_FAT32)							/* Write backup VBR if needed (VBR+6) */
   3732          		disk_write(pdrv, tbl, b_vol + 6, 1);
   3733          
   3734          	/* Initialize FAT area */
   3735          	wsect = b_fat;
   3736          	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
   3737          		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
   3738          		n = md;								/* Media descriptor byte */
   3739          		if (fmt != FS_FAT32) {
   3740          			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
   3741          			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
   3742          		} else {
   3743          			n |= 0xFFFFFF00;
   3744          			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
   3745          			ST_DWORD(tbl+4, 0xFFFFFFFF);
   3746          			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
   3747          		}
   3748          		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
   3749          			return FR_DISK_ERR;
   3750          		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
   3751          		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
   3752          			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
   3753          				return FR_DISK_ERR;
   3754          		}
   3755          	}
   3756          
   3757          	/* Initialize root directory */
   3758          	i = (fmt == FS_FAT32) ? au : n_dir;
   3759          	do {
   3760          		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
   3761          			return FR_DISK_ERR;
   3762          	} while (--i);
   3763          
   3764          #if _USE_ERASE	/* Erase data area if needed */
   3765          	{
   3766          		DWORD eb[2];
   3767          
   3768          		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
   3769          		disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
   3770          	}
   3771          #endif
   3772          
   3773          	/* Create FSInfo if needed */
   3774          	if (fmt == FS_FAT32) {
   3775          		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
   3776          		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
   3777          		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   3778          		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
   3779          		ST_WORD(tbl+BS_55AA, 0xAA55);
   3780          		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
   3781          		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
   3782          	}
   3783          
   3784          	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
   3785          }
   3786          
   3787          
   3788          #if _MULTI_PARTITION == 2
   3789          /*-----------------------------------------------------------------------*/
   3790          /* Divide Physical Drive                                                 */
   3791          /*-----------------------------------------------------------------------*/
   3792          
   3793          FRESULT f_fdisk (
   3794          	BYTE pdrv,			/* Physical drive number */
   3795          	const DWORD szt[],	/* Pointer to the size table for each partitions */
   3796          	void* work			/* Pointer to the working buffer */
   3797          )
   3798          {
   3799          	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
   3800          	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
   3801          	DSTATUS stat;
   3802          	DWORD sz_disk, sz_part, s_part;
   3803          
   3804          
   3805          	stat = disk_initialize(pdrv);
   3806          	if (stat & STA_NOINIT) return FR_NOT_READY;
   3807          	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   3808          	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
   3809          
   3810          	/* Determine CHS in the table regardless of the drive geometry */
   3811          	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
   3812          	if (n == 256) n--;
   3813          	e_hd = n - 1;
   3814          	sz_cyl = 63 * n;
   3815          	tot_cyl = sz_disk / sz_cyl;
   3816          
   3817          	/* Create partition table */
   3818          	mem_set(buf, 0, _MAX_SS);
   3819          	p = buf + MBR_Table; b_cyl = 0;
   3820          	for (i = 0; i < 4; i++, p += SZ_PTE) {
   3821          		p_cyl = (szt[i] <= 100) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
   3822          		if (!p_cyl) continue;
   3823          		s_part = (DWORD)sz_cyl * b_cyl;
   3824          		sz_part = (DWORD)sz_cyl * p_cyl;
   3825          		if (i == 0) {	/* Exclude first track of cylinder 0 */
   3826          			s_hd = 1;
   3827          			s_part += 63; sz_part -= 63;
   3828          		} else {
   3829          			s_hd = 0;
   3830          		}
   3831          		e_cyl = b_cyl + p_cyl - 1;
   3832          		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
   3833          
   3834          		/* Set partition table */
   3835          		p[1] = s_hd;						/* Start head */
   3836          		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
   3837          		p[3] = (BYTE)b_cyl;					/* Start cylinder */
   3838          		p[4] = 0x06;						/* System type (temporary setting) */
   3839          		p[5] = e_hd;						/* End head */
   3840          		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
   3841          		p[7] = (BYTE)e_cyl;					/* End cylinder */
   3842          		ST_DWORD(p + 8, s_part);			/* Start sector in LBA */
   3843          		ST_DWORD(p + 12, sz_part);			/* Partition size */
   3844          
   3845          		/* Next partition */
   3846          		b_cyl += p_cyl;
   3847          	}
   3848          	ST_WORD(p, 0xAA55);
   3849          
   3850          	/* Write it to the MBR */
   3851          	return (disk_write(pdrv, buf, 0, 1) || disk_ioctl(pdrv, CTRL_SYNC, 0)) ? FR_DISK_ERR : FR_OK;
   3852          }
   3853          
   3854          
   3855          #endif /* _MULTI_PARTITION == 2 */
   3856          #endif /* _USE_MKFS && !_FS_READONLY */
   3857          
   3858          
   3859          
   3860          
   3861          #if _USE_STRFUNC
   3862          /*-----------------------------------------------------------------------*/
   3863          /* Get a string from the file                                            */
   3864          /*-----------------------------------------------------------------------*/
   3865          TCHAR* f_gets (
   3866          	TCHAR* buff,	/* Pointer to the string buffer to read */
   3867          	int len,		/* Size of string buffer (characters) */
   3868          	FIL* fil		/* Pointer to the file object */
   3869          )
   3870          {
   3871          	int n = 0;
   3872          	TCHAR c, *p = buff;
   3873          	BYTE s[2];
   3874          	UINT rc;
   3875          
   3876          
   3877          	while (n < len - 1) {			/* Read bytes until buffer gets filled */
   3878          		f_read(fil, s, 1, &rc);
   3879          		if (rc != 1) break;			/* Break on EOF or error */
   3880          		c = s[0];
   3881          #if _LFN_UNICODE					/* Read a character in UTF-8 encoding */
   3882          		if (c >= 0x80) {
   3883          			if (c < 0xC0) continue;	/* Skip stray trailer */
   3884          			if (c < 0xE0) {			/* Two-byte sequense */
   3885          				f_read(fil, s, 1, &rc);
   3886          				if (rc != 1) break;
   3887          				c = ((c & 0x1F) << 6) | (s[0] & 0x3F);
   3888          				if (c < 0x80) c = '?';
   3889          			} else {
   3890          				if (c < 0xF0) {		/* Three-byte sequense */
   3891          					f_read(fil, s, 2, &rc);
   3892          					if (rc != 2) break;
   3893          					c = (c << 12) | ((s[0] & 0x3F) << 6) | (s[1] & 0x3F);
   3894          					if (c < 0x800) c = '?';
   3895          				} else {			/* Reject four-byte sequense */
   3896          					c = '?';
   3897          				}
   3898          			}
   3899          		}
   3900          #endif
   3901          #if _USE_STRFUNC >= 2
   3902          		if (c == '\r') continue;	/* Strip '\r' */
   3903          #endif
   3904          		*p++ = c;
   3905          		n++;
   3906          		if (c == '\n') break;		/* Break on EOL */
   3907          	}
   3908          	*p = 0;
   3909          	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
   3910          }
   3911          
   3912          
   3913          
   3914          #if !_FS_READONLY
   3915          #include <stdarg.h>
   3916          /*-----------------------------------------------------------------------*/
   3917          /* Put a character to the file                                           */
   3918          /*-----------------------------------------------------------------------*/
   3919          int f_putc (
   3920          	TCHAR c,	/* A character to be output */
   3921          	FIL* fil	/* Pointer to the file object */
   3922          )
   3923          {
   3924          	UINT bw, btw;
   3925          	BYTE s[3];
   3926          
   3927          
   3928          #if _USE_STRFUNC >= 2
   3929          	if (c == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
   3930          #endif
   3931          
   3932          #if _LFN_UNICODE	/* Write the character in UTF-8 encoding */
   3933          	if (c < 0x80) {			/* 7-bit */
   3934          		s[0] = (BYTE)c;
   3935          		btw = 1;
   3936          	} else {
   3937          		if (c < 0x800) {	/* 11-bit */
   3938          			s[0] = (BYTE)(0xC0 | (c >> 6));
   3939          			s[1] = (BYTE)(0x80 | (c & 0x3F));
   3940          			btw = 2;
   3941          		} else {			/* 16-bit */
   3942          			s[0] = (BYTE)(0xE0 | (c >> 12));
   3943          			s[1] = (BYTE)(0x80 | ((c >> 6) & 0x3F));
   3944          			s[2] = (BYTE)(0x80 | (c & 0x3F));
   3945          			btw = 3;
   3946          		}
   3947          	}
   3948          #else				/* Write the character without conversion */
   3949          	s[0] = (BYTE)c;
   3950          	btw = 1;
   3951          #endif
   3952          	f_write(fil, s, btw, &bw);		/* Write the char to the file */
   3953          	return (bw == btw) ? 1 : EOF;	/* Return the result */
   3954          }
   3955          
   3956          
   3957          
   3958          
   3959          /*-----------------------------------------------------------------------*/
   3960          /* Put a string to the file                                              */
   3961          /*-----------------------------------------------------------------------*/
   3962          int f_puts (
   3963          	const TCHAR* str,	/* Pointer to the string to be output */
   3964          	FIL* fil			/* Pointer to the file object */
   3965          )
   3966          {
   3967          	int n;
   3968          
   3969          
   3970          	for (n = 0; *str; str++, n++) {
   3971          		if (f_putc(*str, fil) == EOF) return EOF;
   3972          	}
   3973          	return n;
   3974          }
   3975          
   3976          
   3977          
   3978          
   3979          /*-----------------------------------------------------------------------*/
   3980          /* Put a formatted string to the file                                    */
   3981          /*-----------------------------------------------------------------------*/
   3982          int f_printf (
   3983          	FIL* fil,			/* Pointer to the file object */
   3984          	const TCHAR* str,	/* Pointer to the format string */
   3985          	...					/* Optional arguments... */
   3986          )
   3987          {
   3988          	va_list arp;
   3989          	BYTE f, r;
   3990          	UINT i, j, w;
   3991          	ULONG v;
   3992          	TCHAR c, d, s[16], *p;
   3993          	int res, chc, cc;
   3994          
   3995          
   3996          	va_start(arp, str);
   3997          
   3998          	for (cc = res = 0; cc != EOF; res += cc) {
   3999          		c = *str++;
   4000          		if (c == 0) break;			/* End of string */
   4001          		if (c != '%') {				/* Non escape character */
   4002          			cc = f_putc(c, fil);
   4003          			if (cc != EOF) cc = 1;
   4004          			continue;
   4005          		}
   4006          		w = f = 0;
   4007          		c = *str++;
   4008          		if (c == '0') {				/* Flag: '0' padding */
   4009          			f = 1; c = *str++;
   4010          		} else {
   4011          			if (c == '-') {			/* Flag: left justified */
   4012          				f = 2; c = *str++;
   4013          			}
   4014          		}
   4015          		while (IsDigit(c)) {		/* Precision */
   4016          			w = w * 10 + c - '0';
   4017          			c = *str++;
   4018          		}
   4019          		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
   4020          			f |= 4; c = *str++;
   4021          		}
   4022          		if (!c) break;
   4023          		d = c;
   4024          		if (IsLower(d)) d -= 0x20;
   4025          		switch (d) {				/* Type is... */
   4026          		case 'S' :					/* String */
   4027          			p = va_arg(arp, TCHAR*);
   4028          			for (j = 0; p[j]; j++) ;
   4029          			chc = 0;
   4030          			if (!(f & 2)) {
   4031          				while (j++ < w) chc += (cc = f_putc(' ', fil));
   4032          			}
   4033          			chc += (cc = f_puts(p, fil));
   4034          			while (j++ < w) chc += (cc = f_putc(' ', fil));
   4035          			if (cc != EOF) cc = chc;
   4036          			continue;
   4037          		case 'C' :					/* Character */
   4038          			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
   4039          		case 'B' :					/* Binary */
   4040          			r = 2; break;
   4041          		case 'O' :					/* Octal */
   4042          			r = 8; break;
   4043          		case 'D' :					/* Signed decimal */
   4044          		case 'U' :					/* Unsigned decimal */
   4045          			r = 10; break;
   4046          		case 'X' :					/* Hexdecimal */
   4047          			r = 16; break;
   4048          		default:					/* Unknown type (passthrough) */
   4049          			cc = f_putc(c, fil); continue;
   4050          		}
   4051          
   4052          		/* Get an argument and put it in numeral */
   4053          		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
   4054          		if (d == 'D' && (v & 0x80000000)) {
   4055          			v = 0 - v;
   4056          			f |= 8;
   4057          		}
   4058          		i = 0;
   4059          		do {
   4060          			d = (TCHAR)(v % r); v /= r;
   4061          			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
   4062          			s[i++] = d + '0';
   4063          		} while (v && i < sizeof(s) / sizeof(s[0]));
   4064          		if (f & 8) s[i++] = '-';
   4065          		j = i; d = (f & 1) ? '0' : ' ';
   4066          		res = 0;
   4067          		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
   4068          		do res += (cc = f_putc(s[--i], fil)); while(i);
   4069          		while (j++ < w) res += (cc = f_putc(' ', fil));
   4070          		if (cc != EOF) cc = res;
   4071          	}
   4072          
   4073          	va_end(arp);
   4074          	return (cc == EOF) ? cc : res;
   4075          }
   4076          
   4077          #endif /* !_FS_READONLY */
   4078          #endif /* _USE_STRFUNC */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   check_fs
         8   -> disk_read
      24   chk_mounted
        24   -> check_fs
        24   -> disk_initialize
        24   -> disk_read
        24   -> disk_status
       0   clust2sect
      24   create_chain
        24   -> get_fat
        24   -> put_fat
      40   create_name
        40   -> __aeabi_memset
        40   -> ff_convert
      40   dir_find
        40   -> dir_next
        40   -> dir_sdi
        40   -> disk_read
        40   -> disk_write
        40   -> ff_wtoupper
      32   dir_next
        32   -> __aeabi_memclr
        32   -> clust2sect
        32   -> create_chain
        32   -> disk_write
        32   -> get_fat
      40   dir_read
        40   -> dir_next
        40   -> disk_read
        40   -> disk_write
        40   -> sum_sfn
      56   dir_register
        56   -> __aeabi_memclr
        56   -> dir_find
        56   -> dir_next
        56   -> dir_sdi
        56   -> disk_read
        56   -> disk_write
        56   -> gen_numname
        56   -> move_window
        56   -> sum_sfn
      32   dir_remove
        32   -> dir_next
        32   -> dir_sdi
        32   -> disk_read
        32   -> disk_write
      16   dir_sdi
        16   -> clust2sect
        16   -> get_fat
      64   f_chmod
        64   -> chk_mounted
        64   -> follow_path
        64   -> sync
       8   f_close
         8   -> f_sync
      48   f_getfree
        48   -> chk_mounted
        48   -> disk_read
        48   -> disk_write
        48   -> get_fat
      24   f_lseek
        24   -> clust2sect
        24   -> create_chain
        24   -> disk_read
        24   -> disk_write
        24   -> get_fat
        24   -> validate
      96   f_mkdir
        96   -> __aeabi_memclr
        96   -> __aeabi_memset
        96   -> chk_mounted
        96   -> create_chain
        96   -> dir_register
        96   -> disk_write
        96   -> follow_path
        96   -> get_fattime
        96   -> move_window
        96   -> remove_chain
        96   -> sync
       0   f_mount
      80   f_open
        80   -> chk_mounted
        80   -> dir_register
        80   -> follow_path
        80   -> get_fattime
        80   -> move_window
        80   -> remove_chain
      24   f_opendir
        24   -> chk_mounted
        24   -> dir_sdi
        24   -> follow_path
      32   f_read
        32   -> disk_read
        32   -> disk_write
        32   -> get_fat
        32   -> validate
      24   f_readdir
        24   -> dir_next
        24   -> dir_read
        24   -> dir_sdi
        24   -> get_fileinfo
        24   -> validate
     120   f_rename
       120   -> __aeabi_memcpy4
       120   -> chk_mounted
       120   -> dir_register
       120   -> dir_remove
       120   -> follow_path
       120   -> move_window
       120   -> sync
      64   f_stat
        64   -> chk_mounted
        64   -> follow_path
        64   -> get_fileinfo
      16   f_sync
        16   -> disk_write
        16   -> get_fattime
        16   -> move_window
         0   -> sync
        16   -> validate
      16   f_truncate
        16   -> get_fat
        16   -> put_fat
        16   -> remove_chain
        16   -> validate
      96   f_unlink
        96   -> __aeabi_memcpy4
        96   -> chk_mounted
        96   -> dir_read
        96   -> dir_remove
        96   -> dir_sdi
        96   -> follow_path
        96   -> remove_chain
        96   -> sync
      64   f_utime
        64   -> chk_mounted
        64   -> follow_path
        64   -> sync
      32   f_write
        32   -> create_chain
        32   -> disk_read
        32   -> disk_write
        32   -> validate
      16   follow_path
        16   -> create_name
        16   -> dir_find
        16   -> dir_sdi
      20   gen_numname
      24   get_fat
        24   -> move_window
      24   get_fileinfo
        24   -> ff_convert
      24   move_window
        24   -> disk_read
        24   -> disk_write
      24   put_fat
        24   -> move_window
      24   remove_chain
        24   -> get_fat
        24   -> move_window
       0   sum_sfn
      16   sync
        16   -> __aeabi_memclr
        16   -> disk_ioctl
        16   -> disk_write
       8   validate
         8   -> disk_status


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable15
       6  ??Subroutine2_0
       8  ?Subroutine0
       6  ?Subroutine1
      12  ?_0
       8  ?_1
      12  Fsid
          FatFs
     512  LfnBuf
      16  LfnOfs
     102  check_fs
     714  chk_mounted
      24  clust2sect
     148  create_chain
     480  create_name
     422  dir_find
     394  dir_next
     330  dir_read
     698  dir_register
     174  dir_remove
     126  dir_sdi
     128  excvt
      80  f_chmod
      16  f_close
     308  f_getfree
     312  f_lseek
     520  f_mkdir
      36  f_mount
     336  f_open
      94  f_opendir
     368  f_read
      88  f_readdir
     334  f_rename
      64  f_stat
     170  f_sync
     140  f_truncate
     164  f_unlink
      82  f_utime
     416  f_write
     112  follow_path
     140  gen_numname
     200  get_fat
     262  get_fileinfo
     102  move_window
     236  put_fat
     298  remove_chain
      28  sum_sfn
     258  sync
      40  validate

 
   524 bytes in section .bss
 9 024 bytes in section .text
 
 9 024 bytes of CODE memory
   524 bytes of DATA memory

Errors: none
Warnings: none
